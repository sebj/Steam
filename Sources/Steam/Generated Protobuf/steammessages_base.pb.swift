// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: steammessages_base.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

enum EProtoClanEventType: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case kEclanOtherEvent // = 1
  case kEclanGameEvent // = 2
  case kEclanPartyEvent // = 3
  case kEclanMeetingEvent // = 4
  case kEclanSpecialCauseEvent // = 5
  case kEclanMusicAndArtsEvent // = 6
  case kEclanSportsEvent // = 7
  case kEclanTripEvent // = 8
  case kEclanChatEvent // = 9
  case kEclanGameReleaseEvent // = 10
  case kEclanBroadcastEvent // = 11
  case kEclanSmallUpdateEvent // = 12
  case kEclanPreAnnounceMajorUpdateEvent // = 13
  case kEclanMajorUpdateEvent // = 14
  case kEclanDlcreleaseEvent // = 15
  case kEclanFutureReleaseEvent // = 16
  case kEclanEsportTournamentStreamEvent // = 17
  case kEclanDevStreamEvent // = 18
  case kEclanFamousStreamEvent // = 19
  case kEclanGameSalesEvent // = 20
  case kEclanGameItemSalesEvent // = 21
  case kEclanInGameBonusXpevent // = 22
  case kEclanInGameLootEvent // = 23
  case kEclanInGamePerksEvent // = 24
  case kEclanInGameChallengeEvent // = 25
  case kEclanInGameContestEvent // = 26
  case kEclanIrlevent // = 27
  case kEclanNewsEvent // = 28
  case kEclanBetaReleaseEvent // = 29
  case kEclanInGameContentReleaseEvent // = 30
  case kEclanFreeTrial // = 31
  case kEclanSeasonRelease // = 32
  case kEclanSeasonUpdate // = 33
  case kEclanCrosspostEvent // = 34
  case kEclanInGameEventGeneral // = 35

  init() {
    self = .kEclanOtherEvent
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 1: self = .kEclanOtherEvent
    case 2: self = .kEclanGameEvent
    case 3: self = .kEclanPartyEvent
    case 4: self = .kEclanMeetingEvent
    case 5: self = .kEclanSpecialCauseEvent
    case 6: self = .kEclanMusicAndArtsEvent
    case 7: self = .kEclanSportsEvent
    case 8: self = .kEclanTripEvent
    case 9: self = .kEclanChatEvent
    case 10: self = .kEclanGameReleaseEvent
    case 11: self = .kEclanBroadcastEvent
    case 12: self = .kEclanSmallUpdateEvent
    case 13: self = .kEclanPreAnnounceMajorUpdateEvent
    case 14: self = .kEclanMajorUpdateEvent
    case 15: self = .kEclanDlcreleaseEvent
    case 16: self = .kEclanFutureReleaseEvent
    case 17: self = .kEclanEsportTournamentStreamEvent
    case 18: self = .kEclanDevStreamEvent
    case 19: self = .kEclanFamousStreamEvent
    case 20: self = .kEclanGameSalesEvent
    case 21: self = .kEclanGameItemSalesEvent
    case 22: self = .kEclanInGameBonusXpevent
    case 23: self = .kEclanInGameLootEvent
    case 24: self = .kEclanInGamePerksEvent
    case 25: self = .kEclanInGameChallengeEvent
    case 26: self = .kEclanInGameContestEvent
    case 27: self = .kEclanIrlevent
    case 28: self = .kEclanNewsEvent
    case 29: self = .kEclanBetaReleaseEvent
    case 30: self = .kEclanInGameContentReleaseEvent
    case 31: self = .kEclanFreeTrial
    case 32: self = .kEclanSeasonRelease
    case 33: self = .kEclanSeasonUpdate
    case 34: self = .kEclanCrosspostEvent
    case 35: self = .kEclanInGameEventGeneral
    default: return nil
    }
  }

  var rawValue: Int {
    switch self {
    case .kEclanOtherEvent: return 1
    case .kEclanGameEvent: return 2
    case .kEclanPartyEvent: return 3
    case .kEclanMeetingEvent: return 4
    case .kEclanSpecialCauseEvent: return 5
    case .kEclanMusicAndArtsEvent: return 6
    case .kEclanSportsEvent: return 7
    case .kEclanTripEvent: return 8
    case .kEclanChatEvent: return 9
    case .kEclanGameReleaseEvent: return 10
    case .kEclanBroadcastEvent: return 11
    case .kEclanSmallUpdateEvent: return 12
    case .kEclanPreAnnounceMajorUpdateEvent: return 13
    case .kEclanMajorUpdateEvent: return 14
    case .kEclanDlcreleaseEvent: return 15
    case .kEclanFutureReleaseEvent: return 16
    case .kEclanEsportTournamentStreamEvent: return 17
    case .kEclanDevStreamEvent: return 18
    case .kEclanFamousStreamEvent: return 19
    case .kEclanGameSalesEvent: return 20
    case .kEclanGameItemSalesEvent: return 21
    case .kEclanInGameBonusXpevent: return 22
    case .kEclanInGameLootEvent: return 23
    case .kEclanInGamePerksEvent: return 24
    case .kEclanInGameChallengeEvent: return 25
    case .kEclanInGameContestEvent: return 26
    case .kEclanIrlevent: return 27
    case .kEclanNewsEvent: return 28
    case .kEclanBetaReleaseEvent: return 29
    case .kEclanInGameContentReleaseEvent: return 30
    case .kEclanFreeTrial: return 31
    case .kEclanSeasonRelease: return 32
    case .kEclanSeasonUpdate: return 33
    case .kEclanCrosspostEvent: return 34
    case .kEclanInGameEventGeneral: return 35
    }
  }

}

#if swift(>=4.2)

extension EProtoClanEventType: CaseIterable {
  // Support synthesized by the compiler.
}

#endif  // swift(>=4.2)

enum PartnerEventNotificationType: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case kEeventStart // = 0
  case kEeventBroadcastStart // = 1
  case kEeventMatchStart // = 2
  case kEeventPartnerMaxType // = 3

  init() {
    self = .kEeventStart
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .kEeventStart
    case 1: self = .kEeventBroadcastStart
    case 2: self = .kEeventMatchStart
    case 3: self = .kEeventPartnerMaxType
    default: return nil
    }
  }

  var rawValue: Int {
    switch self {
    case .kEeventStart: return 0
    case .kEeventBroadcastStart: return 1
    case .kEeventMatchStart: return 2
    case .kEeventPartnerMaxType: return 3
    }
  }

}

#if swift(>=4.2)

extension PartnerEventNotificationType: CaseIterable {
  // Support synthesized by the compiler.
}

#endif  // swift(>=4.2)

struct CMsgIPAddress {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var ip: CMsgIPAddress.OneOf_Ip? = nil

  var v4: UInt32 {
    get {
      if case .v4(let v)? = ip {return v}
      return 0
    }
    set {ip = .v4(newValue)}
  }

  var v6: Data {
    get {
      if case .v6(let v)? = ip {return v}
      return Data()
    }
    set {ip = .v6(newValue)}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum OneOf_Ip: Equatable {
    case v4(UInt32)
    case v6(Data)

  #if !swift(>=4.1)
    static func ==(lhs: CMsgIPAddress.OneOf_Ip, rhs: CMsgIPAddress.OneOf_Ip) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.v4, .v4): return {
        guard case .v4(let l) = lhs, case .v4(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.v6, .v6): return {
        guard case .v6(let l) = lhs, case .v6(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      default: return false
      }
    }
  #endif
  }

  init() {}
}

struct CMsgIPAddressBucket {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var originalIpAddress: CMsgIPAddress {
    get {return _originalIpAddress ?? CMsgIPAddress()}
    set {_originalIpAddress = newValue}
  }
  /// Returns true if `originalIpAddress` has been explicitly set.
  var hasOriginalIpAddress: Bool {return self._originalIpAddress != nil}
  /// Clears the value of `originalIpAddress`. Subsequent reads from it will return its default value.
  mutating func clearOriginalIpAddress() {self._originalIpAddress = nil}

  var bucket: UInt64 {
    get {return _bucket ?? 0}
    set {_bucket = newValue}
  }
  /// Returns true if `bucket` has been explicitly set.
  var hasBucket: Bool {return self._bucket != nil}
  /// Clears the value of `bucket`. Subsequent reads from it will return its default value.
  mutating func clearBucket() {self._bucket = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _originalIpAddress: CMsgIPAddress? = nil
  fileprivate var _bucket: UInt64? = nil
}

struct CMsgProtoBufHeader {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var steamid: UInt64 {
    get {return _storage._steamid ?? 0}
    set {_uniqueStorage()._steamid = newValue}
  }
  /// Returns true if `steamid` has been explicitly set.
  var hasSteamid: Bool {return _storage._steamid != nil}
  /// Clears the value of `steamid`. Subsequent reads from it will return its default value.
  mutating func clearSteamid() {_uniqueStorage()._steamid = nil}

  var clientSessionid: Int32 {
    get {return _storage._clientSessionid ?? 0}
    set {_uniqueStorage()._clientSessionid = newValue}
  }
  /// Returns true if `clientSessionid` has been explicitly set.
  var hasClientSessionid: Bool {return _storage._clientSessionid != nil}
  /// Clears the value of `clientSessionid`. Subsequent reads from it will return its default value.
  mutating func clearClientSessionid() {_uniqueStorage()._clientSessionid = nil}

  var routingAppid: UInt32 {
    get {return _storage._routingAppid ?? 0}
    set {_uniqueStorage()._routingAppid = newValue}
  }
  /// Returns true if `routingAppid` has been explicitly set.
  var hasRoutingAppid: Bool {return _storage._routingAppid != nil}
  /// Clears the value of `routingAppid`. Subsequent reads from it will return its default value.
  mutating func clearRoutingAppid() {_uniqueStorage()._routingAppid = nil}

  var jobidSource: UInt64 {
    get {return _storage._jobidSource ?? 18446744073709551615}
    set {_uniqueStorage()._jobidSource = newValue}
  }
  /// Returns true if `jobidSource` has been explicitly set.
  var hasJobidSource: Bool {return _storage._jobidSource != nil}
  /// Clears the value of `jobidSource`. Subsequent reads from it will return its default value.
  mutating func clearJobidSource() {_uniqueStorage()._jobidSource = nil}

  var jobidTarget: UInt64 {
    get {return _storage._jobidTarget ?? 18446744073709551615}
    set {_uniqueStorage()._jobidTarget = newValue}
  }
  /// Returns true if `jobidTarget` has been explicitly set.
  var hasJobidTarget: Bool {return _storage._jobidTarget != nil}
  /// Clears the value of `jobidTarget`. Subsequent reads from it will return its default value.
  mutating func clearJobidTarget() {_uniqueStorage()._jobidTarget = nil}

  var targetJobName: String {
    get {return _storage._targetJobName ?? String()}
    set {_uniqueStorage()._targetJobName = newValue}
  }
  /// Returns true if `targetJobName` has been explicitly set.
  var hasTargetJobName: Bool {return _storage._targetJobName != nil}
  /// Clears the value of `targetJobName`. Subsequent reads from it will return its default value.
  mutating func clearTargetJobName() {_uniqueStorage()._targetJobName = nil}

  var seqNum: Int32 {
    get {return _storage._seqNum ?? 0}
    set {_uniqueStorage()._seqNum = newValue}
  }
  /// Returns true if `seqNum` has been explicitly set.
  var hasSeqNum: Bool {return _storage._seqNum != nil}
  /// Clears the value of `seqNum`. Subsequent reads from it will return its default value.
  mutating func clearSeqNum() {_uniqueStorage()._seqNum = nil}

  var eresult: Int32 {
    get {return _storage._eresult ?? 2}
    set {_uniqueStorage()._eresult = newValue}
  }
  /// Returns true if `eresult` has been explicitly set.
  var hasEresult: Bool {return _storage._eresult != nil}
  /// Clears the value of `eresult`. Subsequent reads from it will return its default value.
  mutating func clearEresult() {_uniqueStorage()._eresult = nil}

  var errorMessage: String {
    get {return _storage._errorMessage ?? String()}
    set {_uniqueStorage()._errorMessage = newValue}
  }
  /// Returns true if `errorMessage` has been explicitly set.
  var hasErrorMessage: Bool {return _storage._errorMessage != nil}
  /// Clears the value of `errorMessage`. Subsequent reads from it will return its default value.
  mutating func clearErrorMessage() {_uniqueStorage()._errorMessage = nil}

  var authAccountFlags: UInt32 {
    get {return _storage._authAccountFlags ?? 0}
    set {_uniqueStorage()._authAccountFlags = newValue}
  }
  /// Returns true if `authAccountFlags` has been explicitly set.
  var hasAuthAccountFlags: Bool {return _storage._authAccountFlags != nil}
  /// Clears the value of `authAccountFlags`. Subsequent reads from it will return its default value.
  mutating func clearAuthAccountFlags() {_uniqueStorage()._authAccountFlags = nil}

  var tokenSource: UInt32 {
    get {return _storage._tokenSource ?? 0}
    set {_uniqueStorage()._tokenSource = newValue}
  }
  /// Returns true if `tokenSource` has been explicitly set.
  var hasTokenSource: Bool {return _storage._tokenSource != nil}
  /// Clears the value of `tokenSource`. Subsequent reads from it will return its default value.
  mutating func clearTokenSource() {_uniqueStorage()._tokenSource = nil}

  var adminSpoofingUser: Bool {
    get {return _storage._adminSpoofingUser ?? false}
    set {_uniqueStorage()._adminSpoofingUser = newValue}
  }
  /// Returns true if `adminSpoofingUser` has been explicitly set.
  var hasAdminSpoofingUser: Bool {return _storage._adminSpoofingUser != nil}
  /// Clears the value of `adminSpoofingUser`. Subsequent reads from it will return its default value.
  mutating func clearAdminSpoofingUser() {_uniqueStorage()._adminSpoofingUser = nil}

  var transportError: Int32 {
    get {return _storage._transportError ?? 1}
    set {_uniqueStorage()._transportError = newValue}
  }
  /// Returns true if `transportError` has been explicitly set.
  var hasTransportError: Bool {return _storage._transportError != nil}
  /// Clears the value of `transportError`. Subsequent reads from it will return its default value.
  mutating func clearTransportError() {_uniqueStorage()._transportError = nil}

  var messageid: UInt64 {
    get {return _storage._messageid ?? 18446744073709551615}
    set {_uniqueStorage()._messageid = newValue}
  }
  /// Returns true if `messageid` has been explicitly set.
  var hasMessageid: Bool {return _storage._messageid != nil}
  /// Clears the value of `messageid`. Subsequent reads from it will return its default value.
  mutating func clearMessageid() {_uniqueStorage()._messageid = nil}

  var publisherGroupID: UInt32 {
    get {return _storage._publisherGroupID ?? 0}
    set {_uniqueStorage()._publisherGroupID = newValue}
  }
  /// Returns true if `publisherGroupID` has been explicitly set.
  var hasPublisherGroupID: Bool {return _storage._publisherGroupID != nil}
  /// Clears the value of `publisherGroupID`. Subsequent reads from it will return its default value.
  mutating func clearPublisherGroupID() {_uniqueStorage()._publisherGroupID = nil}

  var sysid: UInt32 {
    get {return _storage._sysid ?? 0}
    set {_uniqueStorage()._sysid = newValue}
  }
  /// Returns true if `sysid` has been explicitly set.
  var hasSysid: Bool {return _storage._sysid != nil}
  /// Clears the value of `sysid`. Subsequent reads from it will return its default value.
  mutating func clearSysid() {_uniqueStorage()._sysid = nil}

  var traceTag: UInt64 {
    get {return _storage._traceTag ?? 0}
    set {_uniqueStorage()._traceTag = newValue}
  }
  /// Returns true if `traceTag` has been explicitly set.
  var hasTraceTag: Bool {return _storage._traceTag != nil}
  /// Clears the value of `traceTag`. Subsequent reads from it will return its default value.
  mutating func clearTraceTag() {_uniqueStorage()._traceTag = nil}

  var webapiKeyID: UInt32 {
    get {return _storage._webapiKeyID ?? 0}
    set {_uniqueStorage()._webapiKeyID = newValue}
  }
  /// Returns true if `webapiKeyID` has been explicitly set.
  var hasWebapiKeyID: Bool {return _storage._webapiKeyID != nil}
  /// Clears the value of `webapiKeyID`. Subsequent reads from it will return its default value.
  mutating func clearWebapiKeyID() {_uniqueStorage()._webapiKeyID = nil}

  var isFromExternalSource: Bool {
    get {return _storage._isFromExternalSource ?? false}
    set {_uniqueStorage()._isFromExternalSource = newValue}
  }
  /// Returns true if `isFromExternalSource` has been explicitly set.
  var hasIsFromExternalSource: Bool {return _storage._isFromExternalSource != nil}
  /// Clears the value of `isFromExternalSource`. Subsequent reads from it will return its default value.
  mutating func clearIsFromExternalSource() {_uniqueStorage()._isFromExternalSource = nil}

  var forwardToSysid: [UInt32] {
    get {return _storage._forwardToSysid}
    set {_uniqueStorage()._forwardToSysid = newValue}
  }

  var cmSysid: UInt32 {
    get {return _storage._cmSysid ?? 0}
    set {_uniqueStorage()._cmSysid = newValue}
  }
  /// Returns true if `cmSysid` has been explicitly set.
  var hasCmSysid: Bool {return _storage._cmSysid != nil}
  /// Clears the value of `cmSysid`. Subsequent reads from it will return its default value.
  mutating func clearCmSysid() {_uniqueStorage()._cmSysid = nil}

  var wgToken: String {
    get {return _storage._wgToken ?? String()}
    set {_uniqueStorage()._wgToken = newValue}
  }
  /// Returns true if `wgToken` has been explicitly set.
  var hasWgToken: Bool {return _storage._wgToken != nil}
  /// Clears the value of `wgToken`. Subsequent reads from it will return its default value.
  mutating func clearWgToken() {_uniqueStorage()._wgToken = nil}

  var launcherType: UInt32 {
    get {return _storage._launcherType ?? 0}
    set {_uniqueStorage()._launcherType = newValue}
  }
  /// Returns true if `launcherType` has been explicitly set.
  var hasLauncherType: Bool {return _storage._launcherType != nil}
  /// Clears the value of `launcherType`. Subsequent reads from it will return its default value.
  mutating func clearLauncherType() {_uniqueStorage()._launcherType = nil}

  var realm: UInt32 {
    get {return _storage._realm ?? 0}
    set {_uniqueStorage()._realm = newValue}
  }
  /// Returns true if `realm` has been explicitly set.
  var hasRealm: Bool {return _storage._realm != nil}
  /// Clears the value of `realm`. Subsequent reads from it will return its default value.
  mutating func clearRealm() {_uniqueStorage()._realm = nil}

  var ipAddr: OneOf_IpAddr? {
    get {return _storage._ipAddr}
    set {_uniqueStorage()._ipAddr = newValue}
  }

  var ip: UInt32 {
    get {
      if case .ip(let v)? = _storage._ipAddr {return v}
      return 0
    }
    set {_uniqueStorage()._ipAddr = .ip(newValue)}
  }

  var ipV6: Data {
    get {
      if case .ipV6(let v)? = _storage._ipAddr {return v}
      return Data()
    }
    set {_uniqueStorage()._ipAddr = .ipV6(newValue)}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum OneOf_IpAddr: Equatable {
    case ip(UInt32)
    case ipV6(Data)

  #if !swift(>=4.1)
    static func ==(lhs: CMsgProtoBufHeader.OneOf_IpAddr, rhs: CMsgProtoBufHeader.OneOf_IpAddr) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.ip, .ip): return {
        guard case .ip(let l) = lhs, case .ip(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.ipV6, .ipV6): return {
        guard case .ipV6(let l) = lhs, case .ipV6(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      default: return false
      }
    }
  #endif
  }

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct CMsgMulti {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var sizeUnzipped: UInt32 {
    get {return _sizeUnzipped ?? 0}
    set {_sizeUnzipped = newValue}
  }
  /// Returns true if `sizeUnzipped` has been explicitly set.
  var hasSizeUnzipped: Bool {return self._sizeUnzipped != nil}
  /// Clears the value of `sizeUnzipped`. Subsequent reads from it will return its default value.
  mutating func clearSizeUnzipped() {self._sizeUnzipped = nil}

  var messageBody: Data {
    get {return _messageBody ?? Data()}
    set {_messageBody = newValue}
  }
  /// Returns true if `messageBody` has been explicitly set.
  var hasMessageBody: Bool {return self._messageBody != nil}
  /// Clears the value of `messageBody`. Subsequent reads from it will return its default value.
  mutating func clearMessageBody() {self._messageBody = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _sizeUnzipped: UInt32? = nil
  fileprivate var _messageBody: Data? = nil
}

struct CMsgProtobufWrapped {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var messageBody: Data {
    get {return _messageBody ?? Data()}
    set {_messageBody = newValue}
  }
  /// Returns true if `messageBody` has been explicitly set.
  var hasMessageBody: Bool {return self._messageBody != nil}
  /// Clears the value of `messageBody`. Subsequent reads from it will return its default value.
  mutating func clearMessageBody() {self._messageBody = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _messageBody: Data? = nil
}

struct CMsgAuthTicket {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var estate: UInt32 {
    get {return _estate ?? 0}
    set {_estate = newValue}
  }
  /// Returns true if `estate` has been explicitly set.
  var hasEstate: Bool {return self._estate != nil}
  /// Clears the value of `estate`. Subsequent reads from it will return its default value.
  mutating func clearEstate() {self._estate = nil}

  var eresult: UInt32 {
    get {return _eresult ?? 2}
    set {_eresult = newValue}
  }
  /// Returns true if `eresult` has been explicitly set.
  var hasEresult: Bool {return self._eresult != nil}
  /// Clears the value of `eresult`. Subsequent reads from it will return its default value.
  mutating func clearEresult() {self._eresult = nil}

  var steamid: UInt64 {
    get {return _steamid ?? 0}
    set {_steamid = newValue}
  }
  /// Returns true if `steamid` has been explicitly set.
  var hasSteamid: Bool {return self._steamid != nil}
  /// Clears the value of `steamid`. Subsequent reads from it will return its default value.
  mutating func clearSteamid() {self._steamid = nil}

  var gameid: UInt64 {
    get {return _gameid ?? 0}
    set {_gameid = newValue}
  }
  /// Returns true if `gameid` has been explicitly set.
  var hasGameid: Bool {return self._gameid != nil}
  /// Clears the value of `gameid`. Subsequent reads from it will return its default value.
  mutating func clearGameid() {self._gameid = nil}

  var hSteamPipe: UInt32 {
    get {return _hSteamPipe ?? 0}
    set {_hSteamPipe = newValue}
  }
  /// Returns true if `hSteamPipe` has been explicitly set.
  var hasHSteamPipe: Bool {return self._hSteamPipe != nil}
  /// Clears the value of `hSteamPipe`. Subsequent reads from it will return its default value.
  mutating func clearHSteamPipe() {self._hSteamPipe = nil}

  var ticketCrc: UInt32 {
    get {return _ticketCrc ?? 0}
    set {_ticketCrc = newValue}
  }
  /// Returns true if `ticketCrc` has been explicitly set.
  var hasTicketCrc: Bool {return self._ticketCrc != nil}
  /// Clears the value of `ticketCrc`. Subsequent reads from it will return its default value.
  mutating func clearTicketCrc() {self._ticketCrc = nil}

  var ticket: Data {
    get {return _ticket ?? Data()}
    set {_ticket = newValue}
  }
  /// Returns true if `ticket` has been explicitly set.
  var hasTicket: Bool {return self._ticket != nil}
  /// Clears the value of `ticket`. Subsequent reads from it will return its default value.
  mutating func clearTicket() {self._ticket = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _estate: UInt32? = nil
  fileprivate var _eresult: UInt32? = nil
  fileprivate var _steamid: UInt64? = nil
  fileprivate var _gameid: UInt64? = nil
  fileprivate var _hSteamPipe: UInt32? = nil
  fileprivate var _ticketCrc: UInt32? = nil
  fileprivate var _ticket: Data? = nil
}

struct CCDDBAppDetailCommon {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var appid: UInt32 {
    get {return _appid ?? 0}
    set {_appid = newValue}
  }
  /// Returns true if `appid` has been explicitly set.
  var hasAppid: Bool {return self._appid != nil}
  /// Clears the value of `appid`. Subsequent reads from it will return its default value.
  mutating func clearAppid() {self._appid = nil}

  var name: String {
    get {return _name ?? String()}
    set {_name = newValue}
  }
  /// Returns true if `name` has been explicitly set.
  var hasName: Bool {return self._name != nil}
  /// Clears the value of `name`. Subsequent reads from it will return its default value.
  mutating func clearName() {self._name = nil}

  var icon: String {
    get {return _icon ?? String()}
    set {_icon = newValue}
  }
  /// Returns true if `icon` has been explicitly set.
  var hasIcon: Bool {return self._icon != nil}
  /// Clears the value of `icon`. Subsequent reads from it will return its default value.
  mutating func clearIcon() {self._icon = nil}

  var logo: String {
    get {return _logo ?? String()}
    set {_logo = newValue}
  }
  /// Returns true if `logo` has been explicitly set.
  var hasLogo: Bool {return self._logo != nil}
  /// Clears the value of `logo`. Subsequent reads from it will return its default value.
  mutating func clearLogo() {self._logo = nil}

  var logoSmall: String {
    get {return _logoSmall ?? String()}
    set {_logoSmall = newValue}
  }
  /// Returns true if `logoSmall` has been explicitly set.
  var hasLogoSmall: Bool {return self._logoSmall != nil}
  /// Clears the value of `logoSmall`. Subsequent reads from it will return its default value.
  mutating func clearLogoSmall() {self._logoSmall = nil}

  var tool: Bool {
    get {return _tool ?? false}
    set {_tool = newValue}
  }
  /// Returns true if `tool` has been explicitly set.
  var hasTool: Bool {return self._tool != nil}
  /// Clears the value of `tool`. Subsequent reads from it will return its default value.
  mutating func clearTool() {self._tool = nil}

  var demo: Bool {
    get {return _demo ?? false}
    set {_demo = newValue}
  }
  /// Returns true if `demo` has been explicitly set.
  var hasDemo: Bool {return self._demo != nil}
  /// Clears the value of `demo`. Subsequent reads from it will return its default value.
  mutating func clearDemo() {self._demo = nil}

  var media: Bool {
    get {return _media ?? false}
    set {_media = newValue}
  }
  /// Returns true if `media` has been explicitly set.
  var hasMedia: Bool {return self._media != nil}
  /// Clears the value of `media`. Subsequent reads from it will return its default value.
  mutating func clearMedia() {self._media = nil}

  var communityVisibleStats: Bool {
    get {return _communityVisibleStats ?? false}
    set {_communityVisibleStats = newValue}
  }
  /// Returns true if `communityVisibleStats` has been explicitly set.
  var hasCommunityVisibleStats: Bool {return self._communityVisibleStats != nil}
  /// Clears the value of `communityVisibleStats`. Subsequent reads from it will return its default value.
  mutating func clearCommunityVisibleStats() {self._communityVisibleStats = nil}

  var friendlyName: String {
    get {return _friendlyName ?? String()}
    set {_friendlyName = newValue}
  }
  /// Returns true if `friendlyName` has been explicitly set.
  var hasFriendlyName: Bool {return self._friendlyName != nil}
  /// Clears the value of `friendlyName`. Subsequent reads from it will return its default value.
  mutating func clearFriendlyName() {self._friendlyName = nil}

  var propagation: String {
    get {return _propagation ?? String()}
    set {_propagation = newValue}
  }
  /// Returns true if `propagation` has been explicitly set.
  var hasPropagation: Bool {return self._propagation != nil}
  /// Clears the value of `propagation`. Subsequent reads from it will return its default value.
  mutating func clearPropagation() {self._propagation = nil}

  var hasAdultContent_p: Bool {
    get {return _hasAdultContent_p ?? false}
    set {_hasAdultContent_p = newValue}
  }
  /// Returns true if `hasAdultContent_p` has been explicitly set.
  var hasHasAdultContent_p: Bool {return self._hasAdultContent_p != nil}
  /// Clears the value of `hasAdultContent_p`. Subsequent reads from it will return its default value.
  mutating func clearHasAdultContent_p() {self._hasAdultContent_p = nil}

  var isVisibleInSteamChina: Bool {
    get {return _isVisibleInSteamChina ?? false}
    set {_isVisibleInSteamChina = newValue}
  }
  /// Returns true if `isVisibleInSteamChina` has been explicitly set.
  var hasIsVisibleInSteamChina: Bool {return self._isVisibleInSteamChina != nil}
  /// Clears the value of `isVisibleInSteamChina`. Subsequent reads from it will return its default value.
  mutating func clearIsVisibleInSteamChina() {self._isVisibleInSteamChina = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _appid: UInt32? = nil
  fileprivate var _name: String? = nil
  fileprivate var _icon: String? = nil
  fileprivate var _logo: String? = nil
  fileprivate var _logoSmall: String? = nil
  fileprivate var _tool: Bool? = nil
  fileprivate var _demo: Bool? = nil
  fileprivate var _media: Bool? = nil
  fileprivate var _communityVisibleStats: Bool? = nil
  fileprivate var _friendlyName: String? = nil
  fileprivate var _propagation: String? = nil
  fileprivate var _hasAdultContent_p: Bool? = nil
  fileprivate var _isVisibleInSteamChina: Bool? = nil
}

struct CMsgAppRights {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var editInfo: Bool {
    get {return _storage._editInfo ?? false}
    set {_uniqueStorage()._editInfo = newValue}
  }
  /// Returns true if `editInfo` has been explicitly set.
  var hasEditInfo: Bool {return _storage._editInfo != nil}
  /// Clears the value of `editInfo`. Subsequent reads from it will return its default value.
  mutating func clearEditInfo() {_uniqueStorage()._editInfo = nil}

  var publish: Bool {
    get {return _storage._publish ?? false}
    set {_uniqueStorage()._publish = newValue}
  }
  /// Returns true if `publish` has been explicitly set.
  var hasPublish: Bool {return _storage._publish != nil}
  /// Clears the value of `publish`. Subsequent reads from it will return its default value.
  mutating func clearPublish() {_uniqueStorage()._publish = nil}

  var viewErrorData: Bool {
    get {return _storage._viewErrorData ?? false}
    set {_uniqueStorage()._viewErrorData = newValue}
  }
  /// Returns true if `viewErrorData` has been explicitly set.
  var hasViewErrorData: Bool {return _storage._viewErrorData != nil}
  /// Clears the value of `viewErrorData`. Subsequent reads from it will return its default value.
  mutating func clearViewErrorData() {_uniqueStorage()._viewErrorData = nil}

  var download: Bool {
    get {return _storage._download ?? false}
    set {_uniqueStorage()._download = newValue}
  }
  /// Returns true if `download` has been explicitly set.
  var hasDownload: Bool {return _storage._download != nil}
  /// Clears the value of `download`. Subsequent reads from it will return its default value.
  mutating func clearDownload() {_uniqueStorage()._download = nil}

  var uploadCdkeys: Bool {
    get {return _storage._uploadCdkeys ?? false}
    set {_uniqueStorage()._uploadCdkeys = newValue}
  }
  /// Returns true if `uploadCdkeys` has been explicitly set.
  var hasUploadCdkeys: Bool {return _storage._uploadCdkeys != nil}
  /// Clears the value of `uploadCdkeys`. Subsequent reads from it will return its default value.
  mutating func clearUploadCdkeys() {_uniqueStorage()._uploadCdkeys = nil}

  var generateCdkeys: Bool {
    get {return _storage._generateCdkeys ?? false}
    set {_uniqueStorage()._generateCdkeys = newValue}
  }
  /// Returns true if `generateCdkeys` has been explicitly set.
  var hasGenerateCdkeys: Bool {return _storage._generateCdkeys != nil}
  /// Clears the value of `generateCdkeys`. Subsequent reads from it will return its default value.
  mutating func clearGenerateCdkeys() {_uniqueStorage()._generateCdkeys = nil}

  var viewFinancials: Bool {
    get {return _storage._viewFinancials ?? false}
    set {_uniqueStorage()._viewFinancials = newValue}
  }
  /// Returns true if `viewFinancials` has been explicitly set.
  var hasViewFinancials: Bool {return _storage._viewFinancials != nil}
  /// Clears the value of `viewFinancials`. Subsequent reads from it will return its default value.
  mutating func clearViewFinancials() {_uniqueStorage()._viewFinancials = nil}

  var manageCeg: Bool {
    get {return _storage._manageCeg ?? false}
    set {_uniqueStorage()._manageCeg = newValue}
  }
  /// Returns true if `manageCeg` has been explicitly set.
  var hasManageCeg: Bool {return _storage._manageCeg != nil}
  /// Clears the value of `manageCeg`. Subsequent reads from it will return its default value.
  mutating func clearManageCeg() {_uniqueStorage()._manageCeg = nil}

  var manageSigning: Bool {
    get {return _storage._manageSigning ?? false}
    set {_uniqueStorage()._manageSigning = newValue}
  }
  /// Returns true if `manageSigning` has been explicitly set.
  var hasManageSigning: Bool {return _storage._manageSigning != nil}
  /// Clears the value of `manageSigning`. Subsequent reads from it will return its default value.
  mutating func clearManageSigning() {_uniqueStorage()._manageSigning = nil}

  var manageCdkeys: Bool {
    get {return _storage._manageCdkeys ?? false}
    set {_uniqueStorage()._manageCdkeys = newValue}
  }
  /// Returns true if `manageCdkeys` has been explicitly set.
  var hasManageCdkeys: Bool {return _storage._manageCdkeys != nil}
  /// Clears the value of `manageCdkeys`. Subsequent reads from it will return its default value.
  mutating func clearManageCdkeys() {_uniqueStorage()._manageCdkeys = nil}

  var editMarketing: Bool {
    get {return _storage._editMarketing ?? false}
    set {_uniqueStorage()._editMarketing = newValue}
  }
  /// Returns true if `editMarketing` has been explicitly set.
  var hasEditMarketing: Bool {return _storage._editMarketing != nil}
  /// Clears the value of `editMarketing`. Subsequent reads from it will return its default value.
  mutating func clearEditMarketing() {_uniqueStorage()._editMarketing = nil}

  var economySupport: Bool {
    get {return _storage._economySupport ?? false}
    set {_uniqueStorage()._economySupport = newValue}
  }
  /// Returns true if `economySupport` has been explicitly set.
  var hasEconomySupport: Bool {return _storage._economySupport != nil}
  /// Clears the value of `economySupport`. Subsequent reads from it will return its default value.
  mutating func clearEconomySupport() {_uniqueStorage()._economySupport = nil}

  var economySupportSupervisor: Bool {
    get {return _storage._economySupportSupervisor ?? false}
    set {_uniqueStorage()._economySupportSupervisor = newValue}
  }
  /// Returns true if `economySupportSupervisor` has been explicitly set.
  var hasEconomySupportSupervisor: Bool {return _storage._economySupportSupervisor != nil}
  /// Clears the value of `economySupportSupervisor`. Subsequent reads from it will return its default value.
  mutating func clearEconomySupportSupervisor() {_uniqueStorage()._economySupportSupervisor = nil}

  var managePricing: Bool {
    get {return _storage._managePricing ?? false}
    set {_uniqueStorage()._managePricing = newValue}
  }
  /// Returns true if `managePricing` has been explicitly set.
  var hasManagePricing: Bool {return _storage._managePricing != nil}
  /// Clears the value of `managePricing`. Subsequent reads from it will return its default value.
  mutating func clearManagePricing() {_uniqueStorage()._managePricing = nil}

  var broadcastLive: Bool {
    get {return _storage._broadcastLive ?? false}
    set {_uniqueStorage()._broadcastLive = newValue}
  }
  /// Returns true if `broadcastLive` has been explicitly set.
  var hasBroadcastLive: Bool {return _storage._broadcastLive != nil}
  /// Clears the value of `broadcastLive`. Subsequent reads from it will return its default value.
  mutating func clearBroadcastLive() {_uniqueStorage()._broadcastLive = nil}

  var viewMarketingTraffic: Bool {
    get {return _storage._viewMarketingTraffic ?? false}
    set {_uniqueStorage()._viewMarketingTraffic = newValue}
  }
  /// Returns true if `viewMarketingTraffic` has been explicitly set.
  var hasViewMarketingTraffic: Bool {return _storage._viewMarketingTraffic != nil}
  /// Clears the value of `viewMarketingTraffic`. Subsequent reads from it will return its default value.
  mutating func clearViewMarketingTraffic() {_uniqueStorage()._viewMarketingTraffic = nil}

  var editStoreDisplayContent: Bool {
    get {return _storage._editStoreDisplayContent ?? false}
    set {_uniqueStorage()._editStoreDisplayContent = newValue}
  }
  /// Returns true if `editStoreDisplayContent` has been explicitly set.
  var hasEditStoreDisplayContent: Bool {return _storage._editStoreDisplayContent != nil}
  /// Clears the value of `editStoreDisplayContent`. Subsequent reads from it will return its default value.
  mutating func clearEditStoreDisplayContent() {_uniqueStorage()._editStoreDisplayContent = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct CCuratorPreferences {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var supportedLanguages: UInt32 {
    get {return _supportedLanguages ?? 0}
    set {_supportedLanguages = newValue}
  }
  /// Returns true if `supportedLanguages` has been explicitly set.
  var hasSupportedLanguages: Bool {return self._supportedLanguages != nil}
  /// Clears the value of `supportedLanguages`. Subsequent reads from it will return its default value.
  mutating func clearSupportedLanguages() {self._supportedLanguages = nil}

  var platformWindows: Bool {
    get {return _platformWindows ?? false}
    set {_platformWindows = newValue}
  }
  /// Returns true if `platformWindows` has been explicitly set.
  var hasPlatformWindows: Bool {return self._platformWindows != nil}
  /// Clears the value of `platformWindows`. Subsequent reads from it will return its default value.
  mutating func clearPlatformWindows() {self._platformWindows = nil}

  var platformMac: Bool {
    get {return _platformMac ?? false}
    set {_platformMac = newValue}
  }
  /// Returns true if `platformMac` has been explicitly set.
  var hasPlatformMac: Bool {return self._platformMac != nil}
  /// Clears the value of `platformMac`. Subsequent reads from it will return its default value.
  mutating func clearPlatformMac() {self._platformMac = nil}

  var platformLinux: Bool {
    get {return _platformLinux ?? false}
    set {_platformLinux = newValue}
  }
  /// Returns true if `platformLinux` has been explicitly set.
  var hasPlatformLinux: Bool {return self._platformLinux != nil}
  /// Clears the value of `platformLinux`. Subsequent reads from it will return its default value.
  mutating func clearPlatformLinux() {self._platformLinux = nil}

  var vrContent: Bool {
    get {return _vrContent ?? false}
    set {_vrContent = newValue}
  }
  /// Returns true if `vrContent` has been explicitly set.
  var hasVrContent: Bool {return self._vrContent != nil}
  /// Clears the value of `vrContent`. Subsequent reads from it will return its default value.
  mutating func clearVrContent() {self._vrContent = nil}

  var adultContentViolence: Bool {
    get {return _adultContentViolence ?? false}
    set {_adultContentViolence = newValue}
  }
  /// Returns true if `adultContentViolence` has been explicitly set.
  var hasAdultContentViolence: Bool {return self._adultContentViolence != nil}
  /// Clears the value of `adultContentViolence`. Subsequent reads from it will return its default value.
  mutating func clearAdultContentViolence() {self._adultContentViolence = nil}

  var adultContentSex: Bool {
    get {return _adultContentSex ?? false}
    set {_adultContentSex = newValue}
  }
  /// Returns true if `adultContentSex` has been explicitly set.
  var hasAdultContentSex: Bool {return self._adultContentSex != nil}
  /// Clears the value of `adultContentSex`. Subsequent reads from it will return its default value.
  mutating func clearAdultContentSex() {self._adultContentSex = nil}

  var timestampUpdated: UInt32 {
    get {return _timestampUpdated ?? 0}
    set {_timestampUpdated = newValue}
  }
  /// Returns true if `timestampUpdated` has been explicitly set.
  var hasTimestampUpdated: Bool {return self._timestampUpdated != nil}
  /// Clears the value of `timestampUpdated`. Subsequent reads from it will return its default value.
  mutating func clearTimestampUpdated() {self._timestampUpdated = nil}

  var tagidsCurated: [UInt32] = []

  var tagidsFiltered: [UInt32] = []

  var websiteTitle: String {
    get {return _websiteTitle ?? String()}
    set {_websiteTitle = newValue}
  }
  /// Returns true if `websiteTitle` has been explicitly set.
  var hasWebsiteTitle: Bool {return self._websiteTitle != nil}
  /// Clears the value of `websiteTitle`. Subsequent reads from it will return its default value.
  mutating func clearWebsiteTitle() {self._websiteTitle = nil}

  var websiteURL: String {
    get {return _websiteURL ?? String()}
    set {_websiteURL = newValue}
  }
  /// Returns true if `websiteURL` has been explicitly set.
  var hasWebsiteURL: Bool {return self._websiteURL != nil}
  /// Clears the value of `websiteURL`. Subsequent reads from it will return its default value.
  mutating func clearWebsiteURL() {self._websiteURL = nil}

  var discussionURL: String {
    get {return _discussionURL ?? String()}
    set {_discussionURL = newValue}
  }
  /// Returns true if `discussionURL` has been explicitly set.
  var hasDiscussionURL: Bool {return self._discussionURL != nil}
  /// Clears the value of `discussionURL`. Subsequent reads from it will return its default value.
  mutating func clearDiscussionURL() {self._discussionURL = nil}

  var showBroadcast: Bool {
    get {return _showBroadcast ?? false}
    set {_showBroadcast = newValue}
  }
  /// Returns true if `showBroadcast` has been explicitly set.
  var hasShowBroadcast: Bool {return self._showBroadcast != nil}
  /// Clears the value of `showBroadcast`. Subsequent reads from it will return its default value.
  mutating func clearShowBroadcast() {self._showBroadcast = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _supportedLanguages: UInt32? = nil
  fileprivate var _platformWindows: Bool? = nil
  fileprivate var _platformMac: Bool? = nil
  fileprivate var _platformLinux: Bool? = nil
  fileprivate var _vrContent: Bool? = nil
  fileprivate var _adultContentViolence: Bool? = nil
  fileprivate var _adultContentSex: Bool? = nil
  fileprivate var _timestampUpdated: UInt32? = nil
  fileprivate var _websiteTitle: String? = nil
  fileprivate var _websiteURL: String? = nil
  fileprivate var _discussionURL: String? = nil
  fileprivate var _showBroadcast: Bool? = nil
}

struct CLocalizationToken {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var language: UInt32 {
    get {return _language ?? 0}
    set {_language = newValue}
  }
  /// Returns true if `language` has been explicitly set.
  var hasLanguage: Bool {return self._language != nil}
  /// Clears the value of `language`. Subsequent reads from it will return its default value.
  mutating func clearLanguage() {self._language = nil}

  var localizedString: String {
    get {return _localizedString ?? String()}
    set {_localizedString = newValue}
  }
  /// Returns true if `localizedString` has been explicitly set.
  var hasLocalizedString: Bool {return self._localizedString != nil}
  /// Clears the value of `localizedString`. Subsequent reads from it will return its default value.
  mutating func clearLocalizedString() {self._localizedString = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _language: UInt32? = nil
  fileprivate var _localizedString: String? = nil
}

struct CClanEventUserNewsTuple {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var clanid: UInt32 {
    get {return _clanid ?? 0}
    set {_clanid = newValue}
  }
  /// Returns true if `clanid` has been explicitly set.
  var hasClanid: Bool {return self._clanid != nil}
  /// Clears the value of `clanid`. Subsequent reads from it will return its default value.
  mutating func clearClanid() {self._clanid = nil}

  var eventGid: UInt64 {
    get {return _eventGid ?? 0}
    set {_eventGid = newValue}
  }
  /// Returns true if `eventGid` has been explicitly set.
  var hasEventGid: Bool {return self._eventGid != nil}
  /// Clears the value of `eventGid`. Subsequent reads from it will return its default value.
  mutating func clearEventGid() {self._eventGid = nil}

  var announcementGid: UInt64 {
    get {return _announcementGid ?? 0}
    set {_announcementGid = newValue}
  }
  /// Returns true if `announcementGid` has been explicitly set.
  var hasAnnouncementGid: Bool {return self._announcementGid != nil}
  /// Clears the value of `announcementGid`. Subsequent reads from it will return its default value.
  mutating func clearAnnouncementGid() {self._announcementGid = nil}

  var rtimeStart: UInt32 {
    get {return _rtimeStart ?? 0}
    set {_rtimeStart = newValue}
  }
  /// Returns true if `rtimeStart` has been explicitly set.
  var hasRtimeStart: Bool {return self._rtimeStart != nil}
  /// Clears the value of `rtimeStart`. Subsequent reads from it will return its default value.
  mutating func clearRtimeStart() {self._rtimeStart = nil}

  var rtimeEnd: UInt32 {
    get {return _rtimeEnd ?? 0}
    set {_rtimeEnd = newValue}
  }
  /// Returns true if `rtimeEnd` has been explicitly set.
  var hasRtimeEnd: Bool {return self._rtimeEnd != nil}
  /// Clears the value of `rtimeEnd`. Subsequent reads from it will return its default value.
  mutating func clearRtimeEnd() {self._rtimeEnd = nil}

  var priorityScore: UInt32 {
    get {return _priorityScore ?? 0}
    set {_priorityScore = newValue}
  }
  /// Returns true if `priorityScore` has been explicitly set.
  var hasPriorityScore: Bool {return self._priorityScore != nil}
  /// Clears the value of `priorityScore`. Subsequent reads from it will return its default value.
  mutating func clearPriorityScore() {self._priorityScore = nil}

  var type: UInt32 {
    get {return _type ?? 0}
    set {_type = newValue}
  }
  /// Returns true if `type` has been explicitly set.
  var hasType: Bool {return self._type != nil}
  /// Clears the value of `type`. Subsequent reads from it will return its default value.
  mutating func clearType() {self._type = nil}

  var clampRangeSlot: UInt32 {
    get {return _clampRangeSlot ?? 0}
    set {_clampRangeSlot = newValue}
  }
  /// Returns true if `clampRangeSlot` has been explicitly set.
  var hasClampRangeSlot: Bool {return self._clampRangeSlot != nil}
  /// Clears the value of `clampRangeSlot`. Subsequent reads from it will return its default value.
  mutating func clearClampRangeSlot() {self._clampRangeSlot = nil}

  var appid: UInt32 {
    get {return _appid ?? 0}
    set {_appid = newValue}
  }
  /// Returns true if `appid` has been explicitly set.
  var hasAppid: Bool {return self._appid != nil}
  /// Clears the value of `appid`. Subsequent reads from it will return its default value.
  mutating func clearAppid() {self._appid = nil}

  var rtime32LastModified: UInt32 {
    get {return _rtime32LastModified ?? 0}
    set {_rtime32LastModified = newValue}
  }
  /// Returns true if `rtime32LastModified` has been explicitly set.
  var hasRtime32LastModified: Bool {return self._rtime32LastModified != nil}
  /// Clears the value of `rtime32LastModified`. Subsequent reads from it will return its default value.
  mutating func clearRtime32LastModified() {self._rtime32LastModified = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _clanid: UInt32? = nil
  fileprivate var _eventGid: UInt64? = nil
  fileprivate var _announcementGid: UInt64? = nil
  fileprivate var _rtimeStart: UInt32? = nil
  fileprivate var _rtimeEnd: UInt32? = nil
  fileprivate var _priorityScore: UInt32? = nil
  fileprivate var _type: UInt32? = nil
  fileprivate var _clampRangeSlot: UInt32? = nil
  fileprivate var _appid: UInt32? = nil
  fileprivate var _rtime32LastModified: UInt32? = nil
}

struct CClanMatchEventByRange {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var rtimeBefore: UInt32 {
    get {return _rtimeBefore ?? 0}
    set {_rtimeBefore = newValue}
  }
  /// Returns true if `rtimeBefore` has been explicitly set.
  var hasRtimeBefore: Bool {return self._rtimeBefore != nil}
  /// Clears the value of `rtimeBefore`. Subsequent reads from it will return its default value.
  mutating func clearRtimeBefore() {self._rtimeBefore = nil}

  var rtimeAfter: UInt32 {
    get {return _rtimeAfter ?? 0}
    set {_rtimeAfter = newValue}
  }
  /// Returns true if `rtimeAfter` has been explicitly set.
  var hasRtimeAfter: Bool {return self._rtimeAfter != nil}
  /// Clears the value of `rtimeAfter`. Subsequent reads from it will return its default value.
  mutating func clearRtimeAfter() {self._rtimeAfter = nil}

  var qualified: UInt32 {
    get {return _qualified ?? 0}
    set {_qualified = newValue}
  }
  /// Returns true if `qualified` has been explicitly set.
  var hasQualified: Bool {return self._qualified != nil}
  /// Clears the value of `qualified`. Subsequent reads from it will return its default value.
  mutating func clearQualified() {self._qualified = nil}

  var events: [CClanEventUserNewsTuple] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _rtimeBefore: UInt32? = nil
  fileprivate var _rtimeAfter: UInt32? = nil
  fileprivate var _qualified: UInt32? = nil
}

struct CCommunity_ClanAnnouncementInfo {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var gid: UInt64 {
    get {return _gid ?? 0}
    set {_gid = newValue}
  }
  /// Returns true if `gid` has been explicitly set.
  var hasGid: Bool {return self._gid != nil}
  /// Clears the value of `gid`. Subsequent reads from it will return its default value.
  mutating func clearGid() {self._gid = nil}

  var clanid: UInt64 {
    get {return _clanid ?? 0}
    set {_clanid = newValue}
  }
  /// Returns true if `clanid` has been explicitly set.
  var hasClanid: Bool {return self._clanid != nil}
  /// Clears the value of `clanid`. Subsequent reads from it will return its default value.
  mutating func clearClanid() {self._clanid = nil}

  var posterid: UInt64 {
    get {return _posterid ?? 0}
    set {_posterid = newValue}
  }
  /// Returns true if `posterid` has been explicitly set.
  var hasPosterid: Bool {return self._posterid != nil}
  /// Clears the value of `posterid`. Subsequent reads from it will return its default value.
  mutating func clearPosterid() {self._posterid = nil}

  var headline: String {
    get {return _headline ?? String()}
    set {_headline = newValue}
  }
  /// Returns true if `headline` has been explicitly set.
  var hasHeadline: Bool {return self._headline != nil}
  /// Clears the value of `headline`. Subsequent reads from it will return its default value.
  mutating func clearHeadline() {self._headline = nil}

  var posttime: UInt32 {
    get {return _posttime ?? 0}
    set {_posttime = newValue}
  }
  /// Returns true if `posttime` has been explicitly set.
  var hasPosttime: Bool {return self._posttime != nil}
  /// Clears the value of `posttime`. Subsequent reads from it will return its default value.
  mutating func clearPosttime() {self._posttime = nil}

  var updatetime: UInt32 {
    get {return _updatetime ?? 0}
    set {_updatetime = newValue}
  }
  /// Returns true if `updatetime` has been explicitly set.
  var hasUpdatetime: Bool {return self._updatetime != nil}
  /// Clears the value of `updatetime`. Subsequent reads from it will return its default value.
  mutating func clearUpdatetime() {self._updatetime = nil}

  var body: String {
    get {return _body ?? String()}
    set {_body = newValue}
  }
  /// Returns true if `body` has been explicitly set.
  var hasBody: Bool {return self._body != nil}
  /// Clears the value of `body`. Subsequent reads from it will return its default value.
  mutating func clearBody() {self._body = nil}

  var commentcount: Int32 {
    get {return _commentcount ?? 0}
    set {_commentcount = newValue}
  }
  /// Returns true if `commentcount` has been explicitly set.
  var hasCommentcount: Bool {return self._commentcount != nil}
  /// Clears the value of `commentcount`. Subsequent reads from it will return its default value.
  mutating func clearCommentcount() {self._commentcount = nil}

  var tags: [String] = []

  var language: Int32 {
    get {return _language ?? 0}
    set {_language = newValue}
  }
  /// Returns true if `language` has been explicitly set.
  var hasLanguage: Bool {return self._language != nil}
  /// Clears the value of `language`. Subsequent reads from it will return its default value.
  mutating func clearLanguage() {self._language = nil}

  var hidden: Bool {
    get {return _hidden ?? false}
    set {_hidden = newValue}
  }
  /// Returns true if `hidden` has been explicitly set.
  var hasHidden: Bool {return self._hidden != nil}
  /// Clears the value of `hidden`. Subsequent reads from it will return its default value.
  mutating func clearHidden() {self._hidden = nil}

  var forumTopicID: UInt64 {
    get {return _forumTopicID ?? 0}
    set {_forumTopicID = newValue}
  }
  /// Returns true if `forumTopicID` has been explicitly set.
  var hasForumTopicID: Bool {return self._forumTopicID != nil}
  /// Clears the value of `forumTopicID`. Subsequent reads from it will return its default value.
  mutating func clearForumTopicID() {self._forumTopicID = nil}

  var eventGid: UInt64 {
    get {return _eventGid ?? 0}
    set {_eventGid = newValue}
  }
  /// Returns true if `eventGid` has been explicitly set.
  var hasEventGid: Bool {return self._eventGid != nil}
  /// Clears the value of `eventGid`. Subsequent reads from it will return its default value.
  mutating func clearEventGid() {self._eventGid = nil}

  var voteupcount: Int32 {
    get {return _voteupcount ?? 0}
    set {_voteupcount = newValue}
  }
  /// Returns true if `voteupcount` has been explicitly set.
  var hasVoteupcount: Bool {return self._voteupcount != nil}
  /// Clears the value of `voteupcount`. Subsequent reads from it will return its default value.
  mutating func clearVoteupcount() {self._voteupcount = nil}

  var votedowncount: Int32 {
    get {return _votedowncount ?? 0}
    set {_votedowncount = newValue}
  }
  /// Returns true if `votedowncount` has been explicitly set.
  var hasVotedowncount: Bool {return self._votedowncount != nil}
  /// Clears the value of `votedowncount`. Subsequent reads from it will return its default value.
  mutating func clearVotedowncount() {self._votedowncount = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _gid: UInt64? = nil
  fileprivate var _clanid: UInt64? = nil
  fileprivate var _posterid: UInt64? = nil
  fileprivate var _headline: String? = nil
  fileprivate var _posttime: UInt32? = nil
  fileprivate var _updatetime: UInt32? = nil
  fileprivate var _body: String? = nil
  fileprivate var _commentcount: Int32? = nil
  fileprivate var _language: Int32? = nil
  fileprivate var _hidden: Bool? = nil
  fileprivate var _forumTopicID: UInt64? = nil
  fileprivate var _eventGid: UInt64? = nil
  fileprivate var _voteupcount: Int32? = nil
  fileprivate var _votedowncount: Int32? = nil
}

struct CClanEventData {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var gid: UInt64 {
    get {return _storage._gid ?? 0}
    set {_uniqueStorage()._gid = newValue}
  }
  /// Returns true if `gid` has been explicitly set.
  var hasGid: Bool {return _storage._gid != nil}
  /// Clears the value of `gid`. Subsequent reads from it will return its default value.
  mutating func clearGid() {_uniqueStorage()._gid = nil}

  var clanSteamid: UInt64 {
    get {return _storage._clanSteamid ?? 0}
    set {_uniqueStorage()._clanSteamid = newValue}
  }
  /// Returns true if `clanSteamid` has been explicitly set.
  var hasClanSteamid: Bool {return _storage._clanSteamid != nil}
  /// Clears the value of `clanSteamid`. Subsequent reads from it will return its default value.
  mutating func clearClanSteamid() {_uniqueStorage()._clanSteamid = nil}

  var eventName: String {
    get {return _storage._eventName ?? String()}
    set {_uniqueStorage()._eventName = newValue}
  }
  /// Returns true if `eventName` has been explicitly set.
  var hasEventName: Bool {return _storage._eventName != nil}
  /// Clears the value of `eventName`. Subsequent reads from it will return its default value.
  mutating func clearEventName() {_uniqueStorage()._eventName = nil}

  var eventType: EProtoClanEventType {
    get {return _storage._eventType ?? .kEclanOtherEvent}
    set {_uniqueStorage()._eventType = newValue}
  }
  /// Returns true if `eventType` has been explicitly set.
  var hasEventType: Bool {return _storage._eventType != nil}
  /// Clears the value of `eventType`. Subsequent reads from it will return its default value.
  mutating func clearEventType() {_uniqueStorage()._eventType = nil}

  var appid: UInt32 {
    get {return _storage._appid ?? 0}
    set {_uniqueStorage()._appid = newValue}
  }
  /// Returns true if `appid` has been explicitly set.
  var hasAppid: Bool {return _storage._appid != nil}
  /// Clears the value of `appid`. Subsequent reads from it will return its default value.
  mutating func clearAppid() {_uniqueStorage()._appid = nil}

  var serverAddress: String {
    get {return _storage._serverAddress ?? String()}
    set {_uniqueStorage()._serverAddress = newValue}
  }
  /// Returns true if `serverAddress` has been explicitly set.
  var hasServerAddress: Bool {return _storage._serverAddress != nil}
  /// Clears the value of `serverAddress`. Subsequent reads from it will return its default value.
  mutating func clearServerAddress() {_uniqueStorage()._serverAddress = nil}

  var serverPassword: String {
    get {return _storage._serverPassword ?? String()}
    set {_uniqueStorage()._serverPassword = newValue}
  }
  /// Returns true if `serverPassword` has been explicitly set.
  var hasServerPassword: Bool {return _storage._serverPassword != nil}
  /// Clears the value of `serverPassword`. Subsequent reads from it will return its default value.
  mutating func clearServerPassword() {_uniqueStorage()._serverPassword = nil}

  var rtime32StartTime: UInt32 {
    get {return _storage._rtime32StartTime ?? 0}
    set {_uniqueStorage()._rtime32StartTime = newValue}
  }
  /// Returns true if `rtime32StartTime` has been explicitly set.
  var hasRtime32StartTime: Bool {return _storage._rtime32StartTime != nil}
  /// Clears the value of `rtime32StartTime`. Subsequent reads from it will return its default value.
  mutating func clearRtime32StartTime() {_uniqueStorage()._rtime32StartTime = nil}

  var rtime32EndTime: UInt32 {
    get {return _storage._rtime32EndTime ?? 0}
    set {_uniqueStorage()._rtime32EndTime = newValue}
  }
  /// Returns true if `rtime32EndTime` has been explicitly set.
  var hasRtime32EndTime: Bool {return _storage._rtime32EndTime != nil}
  /// Clears the value of `rtime32EndTime`. Subsequent reads from it will return its default value.
  mutating func clearRtime32EndTime() {_uniqueStorage()._rtime32EndTime = nil}

  var commentCount: Int32 {
    get {return _storage._commentCount ?? 0}
    set {_uniqueStorage()._commentCount = newValue}
  }
  /// Returns true if `commentCount` has been explicitly set.
  var hasCommentCount: Bool {return _storage._commentCount != nil}
  /// Clears the value of `commentCount`. Subsequent reads from it will return its default value.
  mutating func clearCommentCount() {_uniqueStorage()._commentCount = nil}

  var creatorSteamid: UInt64 {
    get {return _storage._creatorSteamid ?? 0}
    set {_uniqueStorage()._creatorSteamid = newValue}
  }
  /// Returns true if `creatorSteamid` has been explicitly set.
  var hasCreatorSteamid: Bool {return _storage._creatorSteamid != nil}
  /// Clears the value of `creatorSteamid`. Subsequent reads from it will return its default value.
  mutating func clearCreatorSteamid() {_uniqueStorage()._creatorSteamid = nil}

  var lastUpdateSteamid: UInt64 {
    get {return _storage._lastUpdateSteamid ?? 0}
    set {_uniqueStorage()._lastUpdateSteamid = newValue}
  }
  /// Returns true if `lastUpdateSteamid` has been explicitly set.
  var hasLastUpdateSteamid: Bool {return _storage._lastUpdateSteamid != nil}
  /// Clears the value of `lastUpdateSteamid`. Subsequent reads from it will return its default value.
  mutating func clearLastUpdateSteamid() {_uniqueStorage()._lastUpdateSteamid = nil}

  var eventNotes: String {
    get {return _storage._eventNotes ?? String()}
    set {_uniqueStorage()._eventNotes = newValue}
  }
  /// Returns true if `eventNotes` has been explicitly set.
  var hasEventNotes: Bool {return _storage._eventNotes != nil}
  /// Clears the value of `eventNotes`. Subsequent reads from it will return its default value.
  mutating func clearEventNotes() {_uniqueStorage()._eventNotes = nil}

  var jsondata: String {
    get {return _storage._jsondata ?? String()}
    set {_uniqueStorage()._jsondata = newValue}
  }
  /// Returns true if `jsondata` has been explicitly set.
  var hasJsondata: Bool {return _storage._jsondata != nil}
  /// Clears the value of `jsondata`. Subsequent reads from it will return its default value.
  mutating func clearJsondata() {_uniqueStorage()._jsondata = nil}

  var announcementBody: CCommunity_ClanAnnouncementInfo {
    get {return _storage._announcementBody ?? CCommunity_ClanAnnouncementInfo()}
    set {_uniqueStorage()._announcementBody = newValue}
  }
  /// Returns true if `announcementBody` has been explicitly set.
  var hasAnnouncementBody: Bool {return _storage._announcementBody != nil}
  /// Clears the value of `announcementBody`. Subsequent reads from it will return its default value.
  mutating func clearAnnouncementBody() {_uniqueStorage()._announcementBody = nil}

  var published: Bool {
    get {return _storage._published ?? false}
    set {_uniqueStorage()._published = newValue}
  }
  /// Returns true if `published` has been explicitly set.
  var hasPublished: Bool {return _storage._published != nil}
  /// Clears the value of `published`. Subsequent reads from it will return its default value.
  mutating func clearPublished() {_uniqueStorage()._published = nil}

  var hidden: Bool {
    get {return _storage._hidden ?? false}
    set {_uniqueStorage()._hidden = newValue}
  }
  /// Returns true if `hidden` has been explicitly set.
  var hasHidden: Bool {return _storage._hidden != nil}
  /// Clears the value of `hidden`. Subsequent reads from it will return its default value.
  mutating func clearHidden() {_uniqueStorage()._hidden = nil}

  var rtime32VisibilityStart: UInt32 {
    get {return _storage._rtime32VisibilityStart ?? 0}
    set {_uniqueStorage()._rtime32VisibilityStart = newValue}
  }
  /// Returns true if `rtime32VisibilityStart` has been explicitly set.
  var hasRtime32VisibilityStart: Bool {return _storage._rtime32VisibilityStart != nil}
  /// Clears the value of `rtime32VisibilityStart`. Subsequent reads from it will return its default value.
  mutating func clearRtime32VisibilityStart() {_uniqueStorage()._rtime32VisibilityStart = nil}

  var rtime32VisibilityEnd: UInt32 {
    get {return _storage._rtime32VisibilityEnd ?? 0}
    set {_uniqueStorage()._rtime32VisibilityEnd = newValue}
  }
  /// Returns true if `rtime32VisibilityEnd` has been explicitly set.
  var hasRtime32VisibilityEnd: Bool {return _storage._rtime32VisibilityEnd != nil}
  /// Clears the value of `rtime32VisibilityEnd`. Subsequent reads from it will return its default value.
  mutating func clearRtime32VisibilityEnd() {_uniqueStorage()._rtime32VisibilityEnd = nil}

  var broadcasterAccountid: UInt32 {
    get {return _storage._broadcasterAccountid ?? 0}
    set {_uniqueStorage()._broadcasterAccountid = newValue}
  }
  /// Returns true if `broadcasterAccountid` has been explicitly set.
  var hasBroadcasterAccountid: Bool {return _storage._broadcasterAccountid != nil}
  /// Clears the value of `broadcasterAccountid`. Subsequent reads from it will return its default value.
  mutating func clearBroadcasterAccountid() {_uniqueStorage()._broadcasterAccountid = nil}

  var followerCount: UInt32 {
    get {return _storage._followerCount ?? 0}
    set {_uniqueStorage()._followerCount = newValue}
  }
  /// Returns true if `followerCount` has been explicitly set.
  var hasFollowerCount: Bool {return _storage._followerCount != nil}
  /// Clears the value of `followerCount`. Subsequent reads from it will return its default value.
  mutating func clearFollowerCount() {_uniqueStorage()._followerCount = nil}

  var ignoreCount: UInt32 {
    get {return _storage._ignoreCount ?? 0}
    set {_uniqueStorage()._ignoreCount = newValue}
  }
  /// Returns true if `ignoreCount` has been explicitly set.
  var hasIgnoreCount: Bool {return _storage._ignoreCount != nil}
  /// Clears the value of `ignoreCount`. Subsequent reads from it will return its default value.
  mutating func clearIgnoreCount() {_uniqueStorage()._ignoreCount = nil}

  var forumTopicID: UInt64 {
    get {return _storage._forumTopicID ?? 0}
    set {_uniqueStorage()._forumTopicID = newValue}
  }
  /// Returns true if `forumTopicID` has been explicitly set.
  var hasForumTopicID: Bool {return _storage._forumTopicID != nil}
  /// Clears the value of `forumTopicID`. Subsequent reads from it will return its default value.
  mutating func clearForumTopicID() {_uniqueStorage()._forumTopicID = nil}

  var rtime32LastModified: UInt32 {
    get {return _storage._rtime32LastModified ?? 0}
    set {_uniqueStorage()._rtime32LastModified = newValue}
  }
  /// Returns true if `rtime32LastModified` has been explicitly set.
  var hasRtime32LastModified: Bool {return _storage._rtime32LastModified != nil}
  /// Clears the value of `rtime32LastModified`. Subsequent reads from it will return its default value.
  mutating func clearRtime32LastModified() {_uniqueStorage()._rtime32LastModified = nil}

  var newsPostGid: UInt64 {
    get {return _storage._newsPostGid ?? 0}
    set {_uniqueStorage()._newsPostGid = newValue}
  }
  /// Returns true if `newsPostGid` has been explicitly set.
  var hasNewsPostGid: Bool {return _storage._newsPostGid != nil}
  /// Clears the value of `newsPostGid`. Subsequent reads from it will return its default value.
  mutating func clearNewsPostGid() {_uniqueStorage()._newsPostGid = nil}

  var rtimeModReviewed: UInt32 {
    get {return _storage._rtimeModReviewed ?? 0}
    set {_uniqueStorage()._rtimeModReviewed = newValue}
  }
  /// Returns true if `rtimeModReviewed` has been explicitly set.
  var hasRtimeModReviewed: Bool {return _storage._rtimeModReviewed != nil}
  /// Clears the value of `rtimeModReviewed`. Subsequent reads from it will return its default value.
  mutating func clearRtimeModReviewed() {_uniqueStorage()._rtimeModReviewed = nil}

  var featuredAppTagid: UInt32 {
    get {return _storage._featuredAppTagid ?? 0}
    set {_uniqueStorage()._featuredAppTagid = newValue}
  }
  /// Returns true if `featuredAppTagid` has been explicitly set.
  var hasFeaturedAppTagid: Bool {return _storage._featuredAppTagid != nil}
  /// Clears the value of `featuredAppTagid`. Subsequent reads from it will return its default value.
  mutating func clearFeaturedAppTagid() {_uniqueStorage()._featuredAppTagid = nil}

  var referencedAppids: [UInt32] {
    get {return _storage._referencedAppids}
    set {_uniqueStorage()._referencedAppids = newValue}
  }

  var buildID: UInt32 {
    get {return _storage._buildID ?? 0}
    set {_uniqueStorage()._buildID = newValue}
  }
  /// Returns true if `buildID` has been explicitly set.
  var hasBuildID: Bool {return _storage._buildID != nil}
  /// Clears the value of `buildID`. Subsequent reads from it will return its default value.
  mutating func clearBuildID() {_uniqueStorage()._buildID = nil}

  var buildBranch: String {
    get {return _storage._buildBranch ?? String()}
    set {_uniqueStorage()._buildBranch = newValue}
  }
  /// Returns true if `buildBranch` has been explicitly set.
  var hasBuildBranch: Bool {return _storage._buildBranch != nil}
  /// Clears the value of `buildBranch`. Subsequent reads from it will return its default value.
  mutating func clearBuildBranch() {_uniqueStorage()._buildBranch = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct CBilling_Address {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var firstName: String {
    get {return _firstName ?? String()}
    set {_firstName = newValue}
  }
  /// Returns true if `firstName` has been explicitly set.
  var hasFirstName: Bool {return self._firstName != nil}
  /// Clears the value of `firstName`. Subsequent reads from it will return its default value.
  mutating func clearFirstName() {self._firstName = nil}

  var lastName: String {
    get {return _lastName ?? String()}
    set {_lastName = newValue}
  }
  /// Returns true if `lastName` has been explicitly set.
  var hasLastName: Bool {return self._lastName != nil}
  /// Clears the value of `lastName`. Subsequent reads from it will return its default value.
  mutating func clearLastName() {self._lastName = nil}

  var address1: String {
    get {return _address1 ?? String()}
    set {_address1 = newValue}
  }
  /// Returns true if `address1` has been explicitly set.
  var hasAddress1: Bool {return self._address1 != nil}
  /// Clears the value of `address1`. Subsequent reads from it will return its default value.
  mutating func clearAddress1() {self._address1 = nil}

  var address2: String {
    get {return _address2 ?? String()}
    set {_address2 = newValue}
  }
  /// Returns true if `address2` has been explicitly set.
  var hasAddress2: Bool {return self._address2 != nil}
  /// Clears the value of `address2`. Subsequent reads from it will return its default value.
  mutating func clearAddress2() {self._address2 = nil}

  var city: String {
    get {return _city ?? String()}
    set {_city = newValue}
  }
  /// Returns true if `city` has been explicitly set.
  var hasCity: Bool {return self._city != nil}
  /// Clears the value of `city`. Subsequent reads from it will return its default value.
  mutating func clearCity() {self._city = nil}

  var usState: String {
    get {return _usState ?? String()}
    set {_usState = newValue}
  }
  /// Returns true if `usState` has been explicitly set.
  var hasUsState: Bool {return self._usState != nil}
  /// Clears the value of `usState`. Subsequent reads from it will return its default value.
  mutating func clearUsState() {self._usState = nil}

  var countryCode: String {
    get {return _countryCode ?? String()}
    set {_countryCode = newValue}
  }
  /// Returns true if `countryCode` has been explicitly set.
  var hasCountryCode: Bool {return self._countryCode != nil}
  /// Clears the value of `countryCode`. Subsequent reads from it will return its default value.
  mutating func clearCountryCode() {self._countryCode = nil}

  var postcode: String {
    get {return _postcode ?? String()}
    set {_postcode = newValue}
  }
  /// Returns true if `postcode` has been explicitly set.
  var hasPostcode: Bool {return self._postcode != nil}
  /// Clears the value of `postcode`. Subsequent reads from it will return its default value.
  mutating func clearPostcode() {self._postcode = nil}

  var zipPlus4: Int32 {
    get {return _zipPlus4 ?? 0}
    set {_zipPlus4 = newValue}
  }
  /// Returns true if `zipPlus4` has been explicitly set.
  var hasZipPlus4: Bool {return self._zipPlus4 != nil}
  /// Clears the value of `zipPlus4`. Subsequent reads from it will return its default value.
  mutating func clearZipPlus4() {self._zipPlus4 = nil}

  var phone: String {
    get {return _phone ?? String()}
    set {_phone = newValue}
  }
  /// Returns true if `phone` has been explicitly set.
  var hasPhone: Bool {return self._phone != nil}
  /// Clears the value of `phone`. Subsequent reads from it will return its default value.
  mutating func clearPhone() {self._phone = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _firstName: String? = nil
  fileprivate var _lastName: String? = nil
  fileprivate var _address1: String? = nil
  fileprivate var _address2: String? = nil
  fileprivate var _city: String? = nil
  fileprivate var _usState: String? = nil
  fileprivate var _countryCode: String? = nil
  fileprivate var _postcode: String? = nil
  fileprivate var _zipPlus4: Int32? = nil
  fileprivate var _phone: String? = nil
}

struct CPackageReservationStatus {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var packageid: UInt32 {
    get {return _packageid ?? 0}
    set {_packageid = newValue}
  }
  /// Returns true if `packageid` has been explicitly set.
  var hasPackageid: Bool {return self._packageid != nil}
  /// Clears the value of `packageid`. Subsequent reads from it will return its default value.
  mutating func clearPackageid() {self._packageid = nil}

  var reservationState: Int32 {
    get {return _reservationState ?? 0}
    set {_reservationState = newValue}
  }
  /// Returns true if `reservationState` has been explicitly set.
  var hasReservationState: Bool {return self._reservationState != nil}
  /// Clears the value of `reservationState`. Subsequent reads from it will return its default value.
  mutating func clearReservationState() {self._reservationState = nil}

  var queuePosition: Int32 {
    get {return _queuePosition ?? 0}
    set {_queuePosition = newValue}
  }
  /// Returns true if `queuePosition` has been explicitly set.
  var hasQueuePosition: Bool {return self._queuePosition != nil}
  /// Clears the value of `queuePosition`. Subsequent reads from it will return its default value.
  mutating func clearQueuePosition() {self._queuePosition = nil}

  var totalQueueSize: Int32 {
    get {return _totalQueueSize ?? 0}
    set {_totalQueueSize = newValue}
  }
  /// Returns true if `totalQueueSize` has been explicitly set.
  var hasTotalQueueSize: Bool {return self._totalQueueSize != nil}
  /// Clears the value of `totalQueueSize`. Subsequent reads from it will return its default value.
  mutating func clearTotalQueueSize() {self._totalQueueSize = nil}

  var reservationCountryCode: String {
    get {return _reservationCountryCode ?? String()}
    set {_reservationCountryCode = newValue}
  }
  /// Returns true if `reservationCountryCode` has been explicitly set.
  var hasReservationCountryCode: Bool {return self._reservationCountryCode != nil}
  /// Clears the value of `reservationCountryCode`. Subsequent reads from it will return its default value.
  mutating func clearReservationCountryCode() {self._reservationCountryCode = nil}

  var expired: Bool {
    get {return _expired ?? false}
    set {_expired = newValue}
  }
  /// Returns true if `expired` has been explicitly set.
  var hasExpired: Bool {return self._expired != nil}
  /// Clears the value of `expired`. Subsequent reads from it will return its default value.
  mutating func clearExpired() {self._expired = nil}

  var timeExpires: UInt32 {
    get {return _timeExpires ?? 0}
    set {_timeExpires = newValue}
  }
  /// Returns true if `timeExpires` has been explicitly set.
  var hasTimeExpires: Bool {return self._timeExpires != nil}
  /// Clears the value of `timeExpires`. Subsequent reads from it will return its default value.
  mutating func clearTimeExpires() {self._timeExpires = nil}

  var timeReserved: UInt32 {
    get {return _timeReserved ?? 0}
    set {_timeReserved = newValue}
  }
  /// Returns true if `timeReserved` has been explicitly set.
  var hasTimeReserved: Bool {return self._timeReserved != nil}
  /// Clears the value of `timeReserved`. Subsequent reads from it will return its default value.
  mutating func clearTimeReserved() {self._timeReserved = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _packageid: UInt32? = nil
  fileprivate var _reservationState: Int32? = nil
  fileprivate var _queuePosition: Int32? = nil
  fileprivate var _totalQueueSize: Int32? = nil
  fileprivate var _reservationCountryCode: String? = nil
  fileprivate var _expired: Bool? = nil
  fileprivate var _timeExpires: UInt32? = nil
  fileprivate var _timeReserved: UInt32? = nil
}

// MARK: - Extension support defined in steammessages_base.proto.

// MARK: - Extension Properties

// Swift Extensions on the exteneded Messages to add easy access to the declared
// extension fields. The names are based on the extension field name from the proto
// declaration. To avoid naming collisions, the names are prefixed with the name of
// the scope where the extend directive occurs.

extension SwiftProtobuf.Google_Protobuf_FieldOptions {

  var phpOutputAlwaysNumber: Bool {
    get {return getExtensionValue(ext: Extensions_php_output_always_number) ?? false}
    set {setExtensionValue(ext: Extensions_php_output_always_number, value: newValue)}
  }
  /// Returns true if extension `Extensions_php_output_always_number`
  /// has been explicitly set.
  var hasPhpOutputAlwaysNumber: Bool {
    return hasExtensionValue(ext: Extensions_php_output_always_number)
  }
  /// Clears the value of extension `Extensions_php_output_always_number`.
  /// Subsequent reads from it will return its default value.
  mutating func clearPhpOutputAlwaysNumber() {
    clearExtensionValue(ext: Extensions_php_output_always_number)
  }

  var allowFieldNamedSteamID: Bool {
    get {return getExtensionValue(ext: Extensions_allow_field_named_steam_id) ?? false}
    set {setExtensionValue(ext: Extensions_allow_field_named_steam_id, value: newValue)}
  }
  /// Returns true if extension `Extensions_allow_field_named_steam_id`
  /// has been explicitly set.
  var hasAllowFieldNamedSteamID: Bool {
    return hasExtensionValue(ext: Extensions_allow_field_named_steam_id)
  }
  /// Clears the value of extension `Extensions_allow_field_named_steam_id`.
  /// Subsequent reads from it will return its default value.
  mutating func clearAllowFieldNamedSteamID() {
    clearExtensionValue(ext: Extensions_allow_field_named_steam_id)
  }
}

extension SwiftProtobuf.Google_Protobuf_FileOptions {

  var forcePhpGeneration: Bool {
    get {return getExtensionValue(ext: Extensions_force_php_generation) ?? false}
    set {setExtensionValue(ext: Extensions_force_php_generation, value: newValue)}
  }
  /// Returns true if extension `Extensions_force_php_generation`
  /// has been explicitly set.
  var hasForcePhpGeneration: Bool {
    return hasExtensionValue(ext: Extensions_force_php_generation)
  }
  /// Clears the value of extension `Extensions_force_php_generation`.
  /// Subsequent reads from it will return its default value.
  mutating func clearForcePhpGeneration() {
    clearExtensionValue(ext: Extensions_force_php_generation)
  }
}

extension SwiftProtobuf.Google_Protobuf_MessageOptions {

  var msgpoolSoftLimit: Int32 {
    get {return getExtensionValue(ext: Extensions_msgpool_soft_limit) ?? 32}
    set {setExtensionValue(ext: Extensions_msgpool_soft_limit, value: newValue)}
  }
  /// Returns true if extension `Extensions_msgpool_soft_limit`
  /// has been explicitly set.
  var hasMsgpoolSoftLimit: Bool {
    return hasExtensionValue(ext: Extensions_msgpool_soft_limit)
  }
  /// Clears the value of extension `Extensions_msgpool_soft_limit`.
  /// Subsequent reads from it will return its default value.
  mutating func clearMsgpoolSoftLimit() {
    clearExtensionValue(ext: Extensions_msgpool_soft_limit)
  }

  var msgpoolHardLimit: Int32 {
    get {return getExtensionValue(ext: Extensions_msgpool_hard_limit) ?? 384}
    set {setExtensionValue(ext: Extensions_msgpool_hard_limit, value: newValue)}
  }
  /// Returns true if extension `Extensions_msgpool_hard_limit`
  /// has been explicitly set.
  var hasMsgpoolHardLimit: Bool {
    return hasExtensionValue(ext: Extensions_msgpool_hard_limit)
  }
  /// Clears the value of extension `Extensions_msgpool_hard_limit`.
  /// Subsequent reads from it will return its default value.
  mutating func clearMsgpoolHardLimit() {
    clearExtensionValue(ext: Extensions_msgpool_hard_limit)
  }

}

// MARK: - File's ExtensionMap: SteammessagesBase_Extensions

/// A `SwiftProtobuf.SimpleExtensionMap` that includes all of the extensions defined by
/// this .proto file. It can be used any place an `SwiftProtobuf.ExtensionMap` is needed
/// in parsing, or it can be combined with other `SwiftProtobuf.SimpleExtensionMap`s to create
/// a larger `SwiftProtobuf.SimpleExtensionMap`.
let SteammessagesBase_Extensions: SwiftProtobuf.SimpleExtensionMap = [
  Extensions_msgpool_soft_limit,
  Extensions_msgpool_hard_limit,
  Extensions_force_php_generation,
  Extensions_php_output_always_number,
  Extensions_allow_field_named_steam_id
]

// Extension Objects - The only reason these might be needed is when manually
// constructing a `SimpleExtensionMap`, otherwise, use the above _Extension Properties_
// accessors for the extension fields on the messages directly.

let Extensions_msgpool_soft_limit = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalExtensionField<SwiftProtobuf.ProtobufInt32>, SwiftProtobuf.Google_Protobuf_MessageOptions>(
  _protobuf_fieldNumber: 50000,
  fieldName: "msgpool_soft_limit"
)

let Extensions_msgpool_hard_limit = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalExtensionField<SwiftProtobuf.ProtobufInt32>, SwiftProtobuf.Google_Protobuf_MessageOptions>(
  _protobuf_fieldNumber: 50001,
  fieldName: "msgpool_hard_limit"
)

let Extensions_force_php_generation = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalExtensionField<SwiftProtobuf.ProtobufBool>, SwiftProtobuf.Google_Protobuf_FileOptions>(
  _protobuf_fieldNumber: 50000,
  fieldName: "force_php_generation"
)

let Extensions_php_output_always_number = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalExtensionField<SwiftProtobuf.ProtobufBool>, SwiftProtobuf.Google_Protobuf_FieldOptions>(
  _protobuf_fieldNumber: 50020,
  fieldName: "php_output_always_number"
)

let Extensions_allow_field_named_steam_id = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalExtensionField<SwiftProtobuf.ProtobufBool>, SwiftProtobuf.Google_Protobuf_FieldOptions>(
  _protobuf_fieldNumber: 50024,
  fieldName: "allow_field_named_steam_id"
)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension EProtoClanEventType: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "k_EClanOtherEvent"),
    2: .same(proto: "k_EClanGameEvent"),
    3: .same(proto: "k_EClanPartyEvent"),
    4: .same(proto: "k_EClanMeetingEvent"),
    5: .same(proto: "k_EClanSpecialCauseEvent"),
    6: .same(proto: "k_EClanMusicAndArtsEvent"),
    7: .same(proto: "k_EClanSportsEvent"),
    8: .same(proto: "k_EClanTripEvent"),
    9: .same(proto: "k_EClanChatEvent"),
    10: .same(proto: "k_EClanGameReleaseEvent"),
    11: .same(proto: "k_EClanBroadcastEvent"),
    12: .same(proto: "k_EClanSmallUpdateEvent"),
    13: .same(proto: "k_EClanPreAnnounceMajorUpdateEvent"),
    14: .same(proto: "k_EClanMajorUpdateEvent"),
    15: .same(proto: "k_EClanDLCReleaseEvent"),
    16: .same(proto: "k_EClanFutureReleaseEvent"),
    17: .same(proto: "k_EClanESportTournamentStreamEvent"),
    18: .same(proto: "k_EClanDevStreamEvent"),
    19: .same(proto: "k_EClanFamousStreamEvent"),
    20: .same(proto: "k_EClanGameSalesEvent"),
    21: .same(proto: "k_EClanGameItemSalesEvent"),
    22: .same(proto: "k_EClanInGameBonusXPEvent"),
    23: .same(proto: "k_EClanInGameLootEvent"),
    24: .same(proto: "k_EClanInGamePerksEvent"),
    25: .same(proto: "k_EClanInGameChallengeEvent"),
    26: .same(proto: "k_EClanInGameContestEvent"),
    27: .same(proto: "k_EClanIRLEvent"),
    28: .same(proto: "k_EClanNewsEvent"),
    29: .same(proto: "k_EClanBetaReleaseEvent"),
    30: .same(proto: "k_EClanInGameContentReleaseEvent"),
    31: .same(proto: "k_EClanFreeTrial"),
    32: .same(proto: "k_EClanSeasonRelease"),
    33: .same(proto: "k_EClanSeasonUpdate"),
    34: .same(proto: "k_EClanCrosspostEvent"),
    35: .same(proto: "k_EClanInGameEventGeneral"),
  ]
}

extension PartnerEventNotificationType: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "k_EEventStart"),
    1: .same(proto: "k_EEventBroadcastStart"),
    2: .same(proto: "k_EEventMatchStart"),
    3: .same(proto: "k_EEventPartnerMaxType"),
  ]
}

extension CMsgIPAddress: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "CMsgIPAddress"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "v4"),
    2: .same(proto: "v6"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: UInt32?
        try decoder.decodeSingularFixed32Field(value: &v)
        if let v = v {
          if self.ip != nil {try decoder.handleConflictingOneOf()}
          self.ip = .v4(v)
        }
      }()
      case 2: try {
        var v: Data?
        try decoder.decodeSingularBytesField(value: &v)
        if let v = v {
          if self.ip != nil {try decoder.handleConflictingOneOf()}
          self.ip = .v6(v)
        }
      }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    switch self.ip {
    case .v4?: try {
      guard case .v4(let v)? = self.ip else { preconditionFailure() }
      try visitor.visitSingularFixed32Field(value: v, fieldNumber: 1)
    }()
    case .v6?: try {
      guard case .v6(let v)? = self.ip else { preconditionFailure() }
      try visitor.visitSingularBytesField(value: v, fieldNumber: 2)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: CMsgIPAddress, rhs: CMsgIPAddress) -> Bool {
    if lhs.ip != rhs.ip {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension CMsgIPAddressBucket: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "CMsgIPAddressBucket"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "original_ip_address"),
    2: .same(proto: "bucket"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._originalIpAddress) }()
      case 2: try { try decoder.decodeSingularFixed64Field(value: &self._bucket) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._originalIpAddress {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._bucket {
      try visitor.visitSingularFixed64Field(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: CMsgIPAddressBucket, rhs: CMsgIPAddressBucket) -> Bool {
    if lhs._originalIpAddress != rhs._originalIpAddress {return false}
    if lhs._bucket != rhs._bucket {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension CMsgProtoBufHeader: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "CMsgProtoBufHeader"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "steamid"),
    2: .standard(proto: "client_sessionid"),
    3: .standard(proto: "routing_appid"),
    10: .standard(proto: "jobid_source"),
    11: .standard(proto: "jobid_target"),
    12: .standard(proto: "target_job_name"),
    24: .standard(proto: "seq_num"),
    13: .same(proto: "eresult"),
    14: .standard(proto: "error_message"),
    16: .standard(proto: "auth_account_flags"),
    22: .standard(proto: "token_source"),
    23: .standard(proto: "admin_spoofing_user"),
    17: .standard(proto: "transport_error"),
    18: .same(proto: "messageid"),
    19: .standard(proto: "publisher_group_id"),
    20: .same(proto: "sysid"),
    21: .standard(proto: "trace_tag"),
    25: .standard(proto: "webapi_key_id"),
    26: .standard(proto: "is_from_external_source"),
    27: .standard(proto: "forward_to_sysid"),
    28: .standard(proto: "cm_sysid"),
    30: .standard(proto: "wg_token"),
    31: .standard(proto: "launcher_type"),
    32: .same(proto: "realm"),
    15: .same(proto: "ip"),
    29: .standard(proto: "ip_v6"),
  ]

  fileprivate class _StorageClass {
    var _steamid: UInt64? = nil
    var _clientSessionid: Int32? = nil
    var _routingAppid: UInt32? = nil
    var _jobidSource: UInt64? = nil
    var _jobidTarget: UInt64? = nil
    var _targetJobName: String? = nil
    var _seqNum: Int32? = nil
    var _eresult: Int32? = nil
    var _errorMessage: String? = nil
    var _authAccountFlags: UInt32? = nil
    var _tokenSource: UInt32? = nil
    var _adminSpoofingUser: Bool? = nil
    var _transportError: Int32? = nil
    var _messageid: UInt64? = nil
    var _publisherGroupID: UInt32? = nil
    var _sysid: UInt32? = nil
    var _traceTag: UInt64? = nil
    var _webapiKeyID: UInt32? = nil
    var _isFromExternalSource: Bool? = nil
    var _forwardToSysid: [UInt32] = []
    var _cmSysid: UInt32? = nil
    var _wgToken: String? = nil
    var _launcherType: UInt32? = nil
    var _realm: UInt32? = nil
    var _ipAddr: CMsgProtoBufHeader.OneOf_IpAddr?

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _steamid = source._steamid
      _clientSessionid = source._clientSessionid
      _routingAppid = source._routingAppid
      _jobidSource = source._jobidSource
      _jobidTarget = source._jobidTarget
      _targetJobName = source._targetJobName
      _seqNum = source._seqNum
      _eresult = source._eresult
      _errorMessage = source._errorMessage
      _authAccountFlags = source._authAccountFlags
      _tokenSource = source._tokenSource
      _adminSpoofingUser = source._adminSpoofingUser
      _transportError = source._transportError
      _messageid = source._messageid
      _publisherGroupID = source._publisherGroupID
      _sysid = source._sysid
      _traceTag = source._traceTag
      _webapiKeyID = source._webapiKeyID
      _isFromExternalSource = source._isFromExternalSource
      _forwardToSysid = source._forwardToSysid
      _cmSysid = source._cmSysid
      _wgToken = source._wgToken
      _launcherType = source._launcherType
      _realm = source._realm
      _ipAddr = source._ipAddr
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularFixed64Field(value: &_storage._steamid) }()
        case 2: try { try decoder.decodeSingularInt32Field(value: &_storage._clientSessionid) }()
        case 3: try { try decoder.decodeSingularUInt32Field(value: &_storage._routingAppid) }()
        case 10: try { try decoder.decodeSingularFixed64Field(value: &_storage._jobidSource) }()
        case 11: try { try decoder.decodeSingularFixed64Field(value: &_storage._jobidTarget) }()
        case 12: try { try decoder.decodeSingularStringField(value: &_storage._targetJobName) }()
        case 13: try { try decoder.decodeSingularInt32Field(value: &_storage._eresult) }()
        case 14: try { try decoder.decodeSingularStringField(value: &_storage._errorMessage) }()
        case 15: try {
          var v: UInt32?
          try decoder.decodeSingularUInt32Field(value: &v)
          if let v = v {
            if _storage._ipAddr != nil {try decoder.handleConflictingOneOf()}
            _storage._ipAddr = .ip(v)
          }
        }()
        case 16: try { try decoder.decodeSingularUInt32Field(value: &_storage._authAccountFlags) }()
        case 17: try { try decoder.decodeSingularInt32Field(value: &_storage._transportError) }()
        case 18: try { try decoder.decodeSingularUInt64Field(value: &_storage._messageid) }()
        case 19: try { try decoder.decodeSingularUInt32Field(value: &_storage._publisherGroupID) }()
        case 20: try { try decoder.decodeSingularUInt32Field(value: &_storage._sysid) }()
        case 21: try { try decoder.decodeSingularUInt64Field(value: &_storage._traceTag) }()
        case 22: try { try decoder.decodeSingularUInt32Field(value: &_storage._tokenSource) }()
        case 23: try { try decoder.decodeSingularBoolField(value: &_storage._adminSpoofingUser) }()
        case 24: try { try decoder.decodeSingularInt32Field(value: &_storage._seqNum) }()
        case 25: try { try decoder.decodeSingularUInt32Field(value: &_storage._webapiKeyID) }()
        case 26: try { try decoder.decodeSingularBoolField(value: &_storage._isFromExternalSource) }()
        case 27: try { try decoder.decodeRepeatedUInt32Field(value: &_storage._forwardToSysid) }()
        case 28: try { try decoder.decodeSingularUInt32Field(value: &_storage._cmSysid) }()
        case 29: try {
          var v: Data?
          try decoder.decodeSingularBytesField(value: &v)
          if let v = v {
            if _storage._ipAddr != nil {try decoder.handleConflictingOneOf()}
            _storage._ipAddr = .ipV6(v)
          }
        }()
        case 30: try { try decoder.decodeSingularStringField(value: &_storage._wgToken) }()
        case 31: try { try decoder.decodeSingularUInt32Field(value: &_storage._launcherType) }()
        case 32: try { try decoder.decodeSingularUInt32Field(value: &_storage._realm) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      try { if let v = _storage._steamid {
        try visitor.visitSingularFixed64Field(value: v, fieldNumber: 1)
      } }()
      try { if let v = _storage._clientSessionid {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 2)
      } }()
      try { if let v = _storage._routingAppid {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 3)
      } }()
      try { if let v = _storage._jobidSource {
        try visitor.visitSingularFixed64Field(value: v, fieldNumber: 10)
      } }()
      try { if let v = _storage._jobidTarget {
        try visitor.visitSingularFixed64Field(value: v, fieldNumber: 11)
      } }()
      try { if let v = _storage._targetJobName {
        try visitor.visitSingularStringField(value: v, fieldNumber: 12)
      } }()
      try { if let v = _storage._eresult {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 13)
      } }()
      try { if let v = _storage._errorMessage {
        try visitor.visitSingularStringField(value: v, fieldNumber: 14)
      } }()
      try { if case .ip(let v)? = _storage._ipAddr {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 15)
      } }()
      try { if let v = _storage._authAccountFlags {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 16)
      } }()
      try { if let v = _storage._transportError {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 17)
      } }()
      try { if let v = _storage._messageid {
        try visitor.visitSingularUInt64Field(value: v, fieldNumber: 18)
      } }()
      try { if let v = _storage._publisherGroupID {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 19)
      } }()
      try { if let v = _storage._sysid {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 20)
      } }()
      try { if let v = _storage._traceTag {
        try visitor.visitSingularUInt64Field(value: v, fieldNumber: 21)
      } }()
      try { if let v = _storage._tokenSource {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 22)
      } }()
      try { if let v = _storage._adminSpoofingUser {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 23)
      } }()
      try { if let v = _storage._seqNum {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 24)
      } }()
      try { if let v = _storage._webapiKeyID {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 25)
      } }()
      try { if let v = _storage._isFromExternalSource {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 26)
      } }()
      if !_storage._forwardToSysid.isEmpty {
        try visitor.visitRepeatedUInt32Field(value: _storage._forwardToSysid, fieldNumber: 27)
      }
      try { if let v = _storage._cmSysid {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 28)
      } }()
      try { if case .ipV6(let v)? = _storage._ipAddr {
        try visitor.visitSingularBytesField(value: v, fieldNumber: 29)
      } }()
      try { if let v = _storage._wgToken {
        try visitor.visitSingularStringField(value: v, fieldNumber: 30)
      } }()
      try { if let v = _storage._launcherType {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 31)
      } }()
      try { if let v = _storage._realm {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 32)
      } }()
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: CMsgProtoBufHeader, rhs: CMsgProtoBufHeader) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._steamid != rhs_storage._steamid {return false}
        if _storage._clientSessionid != rhs_storage._clientSessionid {return false}
        if _storage._routingAppid != rhs_storage._routingAppid {return false}
        if _storage._jobidSource != rhs_storage._jobidSource {return false}
        if _storage._jobidTarget != rhs_storage._jobidTarget {return false}
        if _storage._targetJobName != rhs_storage._targetJobName {return false}
        if _storage._seqNum != rhs_storage._seqNum {return false}
        if _storage._eresult != rhs_storage._eresult {return false}
        if _storage._errorMessage != rhs_storage._errorMessage {return false}
        if _storage._authAccountFlags != rhs_storage._authAccountFlags {return false}
        if _storage._tokenSource != rhs_storage._tokenSource {return false}
        if _storage._adminSpoofingUser != rhs_storage._adminSpoofingUser {return false}
        if _storage._transportError != rhs_storage._transportError {return false}
        if _storage._messageid != rhs_storage._messageid {return false}
        if _storage._publisherGroupID != rhs_storage._publisherGroupID {return false}
        if _storage._sysid != rhs_storage._sysid {return false}
        if _storage._traceTag != rhs_storage._traceTag {return false}
        if _storage._webapiKeyID != rhs_storage._webapiKeyID {return false}
        if _storage._isFromExternalSource != rhs_storage._isFromExternalSource {return false}
        if _storage._forwardToSysid != rhs_storage._forwardToSysid {return false}
        if _storage._cmSysid != rhs_storage._cmSysid {return false}
        if _storage._wgToken != rhs_storage._wgToken {return false}
        if _storage._launcherType != rhs_storage._launcherType {return false}
        if _storage._realm != rhs_storage._realm {return false}
        if _storage._ipAddr != rhs_storage._ipAddr {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension CMsgMulti: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "CMsgMulti"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "size_unzipped"),
    2: .standard(proto: "message_body"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt32Field(value: &self._sizeUnzipped) }()
      case 2: try { try decoder.decodeSingularBytesField(value: &self._messageBody) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._sizeUnzipped {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._messageBody {
      try visitor.visitSingularBytesField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: CMsgMulti, rhs: CMsgMulti) -> Bool {
    if lhs._sizeUnzipped != rhs._sizeUnzipped {return false}
    if lhs._messageBody != rhs._messageBody {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension CMsgProtobufWrapped: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "CMsgProtobufWrapped"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "message_body"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBytesField(value: &self._messageBody) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._messageBody {
      try visitor.visitSingularBytesField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: CMsgProtobufWrapped, rhs: CMsgProtobufWrapped) -> Bool {
    if lhs._messageBody != rhs._messageBody {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension CMsgAuthTicket: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "CMsgAuthTicket"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "estate"),
    2: .same(proto: "eresult"),
    3: .same(proto: "steamid"),
    4: .same(proto: "gameid"),
    5: .standard(proto: "h_steam_pipe"),
    6: .standard(proto: "ticket_crc"),
    7: .same(proto: "ticket"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt32Field(value: &self._estate) }()
      case 2: try { try decoder.decodeSingularUInt32Field(value: &self._eresult) }()
      case 3: try { try decoder.decodeSingularFixed64Field(value: &self._steamid) }()
      case 4: try { try decoder.decodeSingularFixed64Field(value: &self._gameid) }()
      case 5: try { try decoder.decodeSingularUInt32Field(value: &self._hSteamPipe) }()
      case 6: try { try decoder.decodeSingularUInt32Field(value: &self._ticketCrc) }()
      case 7: try { try decoder.decodeSingularBytesField(value: &self._ticket) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._estate {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._eresult {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._steamid {
      try visitor.visitSingularFixed64Field(value: v, fieldNumber: 3)
    } }()
    try { if let v = self._gameid {
      try visitor.visitSingularFixed64Field(value: v, fieldNumber: 4)
    } }()
    try { if let v = self._hSteamPipe {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 5)
    } }()
    try { if let v = self._ticketCrc {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 6)
    } }()
    try { if let v = self._ticket {
      try visitor.visitSingularBytesField(value: v, fieldNumber: 7)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: CMsgAuthTicket, rhs: CMsgAuthTicket) -> Bool {
    if lhs._estate != rhs._estate {return false}
    if lhs._eresult != rhs._eresult {return false}
    if lhs._steamid != rhs._steamid {return false}
    if lhs._gameid != rhs._gameid {return false}
    if lhs._hSteamPipe != rhs._hSteamPipe {return false}
    if lhs._ticketCrc != rhs._ticketCrc {return false}
    if lhs._ticket != rhs._ticket {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension CCDDBAppDetailCommon: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "CCDDBAppDetailCommon"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "appid"),
    2: .same(proto: "name"),
    3: .same(proto: "icon"),
    4: .same(proto: "logo"),
    5: .standard(proto: "logo_small"),
    6: .same(proto: "tool"),
    7: .same(proto: "demo"),
    8: .same(proto: "media"),
    9: .standard(proto: "community_visible_stats"),
    10: .standard(proto: "friendly_name"),
    11: .same(proto: "propagation"),
    12: .standard(proto: "has_adult_content"),
    13: .standard(proto: "is_visible_in_steam_china"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt32Field(value: &self._appid) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self._name) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self._icon) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self._logo) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self._logoSmall) }()
      case 6: try { try decoder.decodeSingularBoolField(value: &self._tool) }()
      case 7: try { try decoder.decodeSingularBoolField(value: &self._demo) }()
      case 8: try { try decoder.decodeSingularBoolField(value: &self._media) }()
      case 9: try { try decoder.decodeSingularBoolField(value: &self._communityVisibleStats) }()
      case 10: try { try decoder.decodeSingularStringField(value: &self._friendlyName) }()
      case 11: try { try decoder.decodeSingularStringField(value: &self._propagation) }()
      case 12: try { try decoder.decodeSingularBoolField(value: &self._hasAdultContent_p) }()
      case 13: try { try decoder.decodeSingularBoolField(value: &self._isVisibleInSteamChina) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._appid {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._name {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._icon {
      try visitor.visitSingularStringField(value: v, fieldNumber: 3)
    } }()
    try { if let v = self._logo {
      try visitor.visitSingularStringField(value: v, fieldNumber: 4)
    } }()
    try { if let v = self._logoSmall {
      try visitor.visitSingularStringField(value: v, fieldNumber: 5)
    } }()
    try { if let v = self._tool {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 6)
    } }()
    try { if let v = self._demo {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 7)
    } }()
    try { if let v = self._media {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 8)
    } }()
    try { if let v = self._communityVisibleStats {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 9)
    } }()
    try { if let v = self._friendlyName {
      try visitor.visitSingularStringField(value: v, fieldNumber: 10)
    } }()
    try { if let v = self._propagation {
      try visitor.visitSingularStringField(value: v, fieldNumber: 11)
    } }()
    try { if let v = self._hasAdultContent_p {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 12)
    } }()
    try { if let v = self._isVisibleInSteamChina {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 13)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: CCDDBAppDetailCommon, rhs: CCDDBAppDetailCommon) -> Bool {
    if lhs._appid != rhs._appid {return false}
    if lhs._name != rhs._name {return false}
    if lhs._icon != rhs._icon {return false}
    if lhs._logo != rhs._logo {return false}
    if lhs._logoSmall != rhs._logoSmall {return false}
    if lhs._tool != rhs._tool {return false}
    if lhs._demo != rhs._demo {return false}
    if lhs._media != rhs._media {return false}
    if lhs._communityVisibleStats != rhs._communityVisibleStats {return false}
    if lhs._friendlyName != rhs._friendlyName {return false}
    if lhs._propagation != rhs._propagation {return false}
    if lhs._hasAdultContent_p != rhs._hasAdultContent_p {return false}
    if lhs._isVisibleInSteamChina != rhs._isVisibleInSteamChina {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension CMsgAppRights: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "CMsgAppRights"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "edit_info"),
    2: .same(proto: "publish"),
    3: .standard(proto: "view_error_data"),
    4: .same(proto: "download"),
    5: .standard(proto: "upload_cdkeys"),
    6: .standard(proto: "generate_cdkeys"),
    7: .standard(proto: "view_financials"),
    8: .standard(proto: "manage_ceg"),
    9: .standard(proto: "manage_signing"),
    10: .standard(proto: "manage_cdkeys"),
    11: .standard(proto: "edit_marketing"),
    12: .standard(proto: "economy_support"),
    13: .standard(proto: "economy_support_supervisor"),
    14: .standard(proto: "manage_pricing"),
    15: .standard(proto: "broadcast_live"),
    16: .standard(proto: "view_marketing_traffic"),
    17: .standard(proto: "edit_store_display_content"),
  ]

  fileprivate class _StorageClass {
    var _editInfo: Bool? = nil
    var _publish: Bool? = nil
    var _viewErrorData: Bool? = nil
    var _download: Bool? = nil
    var _uploadCdkeys: Bool? = nil
    var _generateCdkeys: Bool? = nil
    var _viewFinancials: Bool? = nil
    var _manageCeg: Bool? = nil
    var _manageSigning: Bool? = nil
    var _manageCdkeys: Bool? = nil
    var _editMarketing: Bool? = nil
    var _economySupport: Bool? = nil
    var _economySupportSupervisor: Bool? = nil
    var _managePricing: Bool? = nil
    var _broadcastLive: Bool? = nil
    var _viewMarketingTraffic: Bool? = nil
    var _editStoreDisplayContent: Bool? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _editInfo = source._editInfo
      _publish = source._publish
      _viewErrorData = source._viewErrorData
      _download = source._download
      _uploadCdkeys = source._uploadCdkeys
      _generateCdkeys = source._generateCdkeys
      _viewFinancials = source._viewFinancials
      _manageCeg = source._manageCeg
      _manageSigning = source._manageSigning
      _manageCdkeys = source._manageCdkeys
      _editMarketing = source._editMarketing
      _economySupport = source._economySupport
      _economySupportSupervisor = source._economySupportSupervisor
      _managePricing = source._managePricing
      _broadcastLive = source._broadcastLive
      _viewMarketingTraffic = source._viewMarketingTraffic
      _editStoreDisplayContent = source._editStoreDisplayContent
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularBoolField(value: &_storage._editInfo) }()
        case 2: try { try decoder.decodeSingularBoolField(value: &_storage._publish) }()
        case 3: try { try decoder.decodeSingularBoolField(value: &_storage._viewErrorData) }()
        case 4: try { try decoder.decodeSingularBoolField(value: &_storage._download) }()
        case 5: try { try decoder.decodeSingularBoolField(value: &_storage._uploadCdkeys) }()
        case 6: try { try decoder.decodeSingularBoolField(value: &_storage._generateCdkeys) }()
        case 7: try { try decoder.decodeSingularBoolField(value: &_storage._viewFinancials) }()
        case 8: try { try decoder.decodeSingularBoolField(value: &_storage._manageCeg) }()
        case 9: try { try decoder.decodeSingularBoolField(value: &_storage._manageSigning) }()
        case 10: try { try decoder.decodeSingularBoolField(value: &_storage._manageCdkeys) }()
        case 11: try { try decoder.decodeSingularBoolField(value: &_storage._editMarketing) }()
        case 12: try { try decoder.decodeSingularBoolField(value: &_storage._economySupport) }()
        case 13: try { try decoder.decodeSingularBoolField(value: &_storage._economySupportSupervisor) }()
        case 14: try { try decoder.decodeSingularBoolField(value: &_storage._managePricing) }()
        case 15: try { try decoder.decodeSingularBoolField(value: &_storage._broadcastLive) }()
        case 16: try { try decoder.decodeSingularBoolField(value: &_storage._viewMarketingTraffic) }()
        case 17: try { try decoder.decodeSingularBoolField(value: &_storage._editStoreDisplayContent) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      try { if let v = _storage._editInfo {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 1)
      } }()
      try { if let v = _storage._publish {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 2)
      } }()
      try { if let v = _storage._viewErrorData {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 3)
      } }()
      try { if let v = _storage._download {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 4)
      } }()
      try { if let v = _storage._uploadCdkeys {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 5)
      } }()
      try { if let v = _storage._generateCdkeys {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 6)
      } }()
      try { if let v = _storage._viewFinancials {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 7)
      } }()
      try { if let v = _storage._manageCeg {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 8)
      } }()
      try { if let v = _storage._manageSigning {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 9)
      } }()
      try { if let v = _storage._manageCdkeys {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 10)
      } }()
      try { if let v = _storage._editMarketing {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 11)
      } }()
      try { if let v = _storage._economySupport {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 12)
      } }()
      try { if let v = _storage._economySupportSupervisor {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 13)
      } }()
      try { if let v = _storage._managePricing {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 14)
      } }()
      try { if let v = _storage._broadcastLive {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 15)
      } }()
      try { if let v = _storage._viewMarketingTraffic {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 16)
      } }()
      try { if let v = _storage._editStoreDisplayContent {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 17)
      } }()
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: CMsgAppRights, rhs: CMsgAppRights) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._editInfo != rhs_storage._editInfo {return false}
        if _storage._publish != rhs_storage._publish {return false}
        if _storage._viewErrorData != rhs_storage._viewErrorData {return false}
        if _storage._download != rhs_storage._download {return false}
        if _storage._uploadCdkeys != rhs_storage._uploadCdkeys {return false}
        if _storage._generateCdkeys != rhs_storage._generateCdkeys {return false}
        if _storage._viewFinancials != rhs_storage._viewFinancials {return false}
        if _storage._manageCeg != rhs_storage._manageCeg {return false}
        if _storage._manageSigning != rhs_storage._manageSigning {return false}
        if _storage._manageCdkeys != rhs_storage._manageCdkeys {return false}
        if _storage._editMarketing != rhs_storage._editMarketing {return false}
        if _storage._economySupport != rhs_storage._economySupport {return false}
        if _storage._economySupportSupervisor != rhs_storage._economySupportSupervisor {return false}
        if _storage._managePricing != rhs_storage._managePricing {return false}
        if _storage._broadcastLive != rhs_storage._broadcastLive {return false}
        if _storage._viewMarketingTraffic != rhs_storage._viewMarketingTraffic {return false}
        if _storage._editStoreDisplayContent != rhs_storage._editStoreDisplayContent {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension CCuratorPreferences: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "CCuratorPreferences"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "supported_languages"),
    2: .standard(proto: "platform_windows"),
    3: .standard(proto: "platform_mac"),
    4: .standard(proto: "platform_linux"),
    5: .standard(proto: "vr_content"),
    6: .standard(proto: "adult_content_violence"),
    7: .standard(proto: "adult_content_sex"),
    8: .standard(proto: "timestamp_updated"),
    9: .standard(proto: "tagids_curated"),
    10: .standard(proto: "tagids_filtered"),
    11: .standard(proto: "website_title"),
    12: .standard(proto: "website_url"),
    13: .standard(proto: "discussion_url"),
    14: .standard(proto: "show_broadcast"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt32Field(value: &self._supportedLanguages) }()
      case 2: try { try decoder.decodeSingularBoolField(value: &self._platformWindows) }()
      case 3: try { try decoder.decodeSingularBoolField(value: &self._platformMac) }()
      case 4: try { try decoder.decodeSingularBoolField(value: &self._platformLinux) }()
      case 5: try { try decoder.decodeSingularBoolField(value: &self._vrContent) }()
      case 6: try { try decoder.decodeSingularBoolField(value: &self._adultContentViolence) }()
      case 7: try { try decoder.decodeSingularBoolField(value: &self._adultContentSex) }()
      case 8: try { try decoder.decodeSingularUInt32Field(value: &self._timestampUpdated) }()
      case 9: try { try decoder.decodeRepeatedUInt32Field(value: &self.tagidsCurated) }()
      case 10: try { try decoder.decodeRepeatedUInt32Field(value: &self.tagidsFiltered) }()
      case 11: try { try decoder.decodeSingularStringField(value: &self._websiteTitle) }()
      case 12: try { try decoder.decodeSingularStringField(value: &self._websiteURL) }()
      case 13: try { try decoder.decodeSingularStringField(value: &self._discussionURL) }()
      case 14: try { try decoder.decodeSingularBoolField(value: &self._showBroadcast) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._supportedLanguages {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._platformWindows {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._platformMac {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 3)
    } }()
    try { if let v = self._platformLinux {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 4)
    } }()
    try { if let v = self._vrContent {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 5)
    } }()
    try { if let v = self._adultContentViolence {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 6)
    } }()
    try { if let v = self._adultContentSex {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 7)
    } }()
    try { if let v = self._timestampUpdated {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 8)
    } }()
    if !self.tagidsCurated.isEmpty {
      try visitor.visitRepeatedUInt32Field(value: self.tagidsCurated, fieldNumber: 9)
    }
    if !self.tagidsFiltered.isEmpty {
      try visitor.visitRepeatedUInt32Field(value: self.tagidsFiltered, fieldNumber: 10)
    }
    try { if let v = self._websiteTitle {
      try visitor.visitSingularStringField(value: v, fieldNumber: 11)
    } }()
    try { if let v = self._websiteURL {
      try visitor.visitSingularStringField(value: v, fieldNumber: 12)
    } }()
    try { if let v = self._discussionURL {
      try visitor.visitSingularStringField(value: v, fieldNumber: 13)
    } }()
    try { if let v = self._showBroadcast {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 14)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: CCuratorPreferences, rhs: CCuratorPreferences) -> Bool {
    if lhs._supportedLanguages != rhs._supportedLanguages {return false}
    if lhs._platformWindows != rhs._platformWindows {return false}
    if lhs._platformMac != rhs._platformMac {return false}
    if lhs._platformLinux != rhs._platformLinux {return false}
    if lhs._vrContent != rhs._vrContent {return false}
    if lhs._adultContentViolence != rhs._adultContentViolence {return false}
    if lhs._adultContentSex != rhs._adultContentSex {return false}
    if lhs._timestampUpdated != rhs._timestampUpdated {return false}
    if lhs.tagidsCurated != rhs.tagidsCurated {return false}
    if lhs.tagidsFiltered != rhs.tagidsFiltered {return false}
    if lhs._websiteTitle != rhs._websiteTitle {return false}
    if lhs._websiteURL != rhs._websiteURL {return false}
    if lhs._discussionURL != rhs._discussionURL {return false}
    if lhs._showBroadcast != rhs._showBroadcast {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension CLocalizationToken: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "CLocalizationToken"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "language"),
    2: .standard(proto: "localized_string"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt32Field(value: &self._language) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self._localizedString) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._language {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._localizedString {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: CLocalizationToken, rhs: CLocalizationToken) -> Bool {
    if lhs._language != rhs._language {return false}
    if lhs._localizedString != rhs._localizedString {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension CClanEventUserNewsTuple: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "CClanEventUserNewsTuple"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "clanid"),
    2: .standard(proto: "event_gid"),
    3: .standard(proto: "announcement_gid"),
    4: .standard(proto: "rtime_start"),
    5: .standard(proto: "rtime_end"),
    6: .standard(proto: "priority_score"),
    7: .same(proto: "type"),
    8: .standard(proto: "clamp_range_slot"),
    9: .same(proto: "appid"),
    10: .standard(proto: "rtime32_last_modified"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt32Field(value: &self._clanid) }()
      case 2: try { try decoder.decodeSingularFixed64Field(value: &self._eventGid) }()
      case 3: try { try decoder.decodeSingularFixed64Field(value: &self._announcementGid) }()
      case 4: try { try decoder.decodeSingularUInt32Field(value: &self._rtimeStart) }()
      case 5: try { try decoder.decodeSingularUInt32Field(value: &self._rtimeEnd) }()
      case 6: try { try decoder.decodeSingularUInt32Field(value: &self._priorityScore) }()
      case 7: try { try decoder.decodeSingularUInt32Field(value: &self._type) }()
      case 8: try { try decoder.decodeSingularUInt32Field(value: &self._clampRangeSlot) }()
      case 9: try { try decoder.decodeSingularUInt32Field(value: &self._appid) }()
      case 10: try { try decoder.decodeSingularUInt32Field(value: &self._rtime32LastModified) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._clanid {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._eventGid {
      try visitor.visitSingularFixed64Field(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._announcementGid {
      try visitor.visitSingularFixed64Field(value: v, fieldNumber: 3)
    } }()
    try { if let v = self._rtimeStart {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 4)
    } }()
    try { if let v = self._rtimeEnd {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 5)
    } }()
    try { if let v = self._priorityScore {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 6)
    } }()
    try { if let v = self._type {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 7)
    } }()
    try { if let v = self._clampRangeSlot {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 8)
    } }()
    try { if let v = self._appid {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 9)
    } }()
    try { if let v = self._rtime32LastModified {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 10)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: CClanEventUserNewsTuple, rhs: CClanEventUserNewsTuple) -> Bool {
    if lhs._clanid != rhs._clanid {return false}
    if lhs._eventGid != rhs._eventGid {return false}
    if lhs._announcementGid != rhs._announcementGid {return false}
    if lhs._rtimeStart != rhs._rtimeStart {return false}
    if lhs._rtimeEnd != rhs._rtimeEnd {return false}
    if lhs._priorityScore != rhs._priorityScore {return false}
    if lhs._type != rhs._type {return false}
    if lhs._clampRangeSlot != rhs._clampRangeSlot {return false}
    if lhs._appid != rhs._appid {return false}
    if lhs._rtime32LastModified != rhs._rtime32LastModified {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension CClanMatchEventByRange: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "CClanMatchEventByRange"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "rtime_before"),
    2: .standard(proto: "rtime_after"),
    3: .same(proto: "qualified"),
    4: .same(proto: "events"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt32Field(value: &self._rtimeBefore) }()
      case 2: try { try decoder.decodeSingularUInt32Field(value: &self._rtimeAfter) }()
      case 3: try { try decoder.decodeSingularUInt32Field(value: &self._qualified) }()
      case 4: try { try decoder.decodeRepeatedMessageField(value: &self.events) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._rtimeBefore {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._rtimeAfter {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._qualified {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 3)
    } }()
    if !self.events.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.events, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: CClanMatchEventByRange, rhs: CClanMatchEventByRange) -> Bool {
    if lhs._rtimeBefore != rhs._rtimeBefore {return false}
    if lhs._rtimeAfter != rhs._rtimeAfter {return false}
    if lhs._qualified != rhs._qualified {return false}
    if lhs.events != rhs.events {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension CCommunity_ClanAnnouncementInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "CCommunity_ClanAnnouncementInfo"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "gid"),
    2: .same(proto: "clanid"),
    3: .same(proto: "posterid"),
    4: .same(proto: "headline"),
    5: .same(proto: "posttime"),
    6: .same(proto: "updatetime"),
    7: .same(proto: "body"),
    8: .same(proto: "commentcount"),
    9: .same(proto: "tags"),
    10: .same(proto: "language"),
    11: .same(proto: "hidden"),
    12: .standard(proto: "forum_topic_id"),
    13: .standard(proto: "event_gid"),
    14: .same(proto: "voteupcount"),
    15: .same(proto: "votedowncount"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt64Field(value: &self._gid) }()
      case 2: try { try decoder.decodeSingularUInt64Field(value: &self._clanid) }()
      case 3: try { try decoder.decodeSingularUInt64Field(value: &self._posterid) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self._headline) }()
      case 5: try { try decoder.decodeSingularUInt32Field(value: &self._posttime) }()
      case 6: try { try decoder.decodeSingularUInt32Field(value: &self._updatetime) }()
      case 7: try { try decoder.decodeSingularStringField(value: &self._body) }()
      case 8: try { try decoder.decodeSingularInt32Field(value: &self._commentcount) }()
      case 9: try { try decoder.decodeRepeatedStringField(value: &self.tags) }()
      case 10: try { try decoder.decodeSingularInt32Field(value: &self._language) }()
      case 11: try { try decoder.decodeSingularBoolField(value: &self._hidden) }()
      case 12: try { try decoder.decodeSingularFixed64Field(value: &self._forumTopicID) }()
      case 13: try { try decoder.decodeSingularFixed64Field(value: &self._eventGid) }()
      case 14: try { try decoder.decodeSingularInt32Field(value: &self._voteupcount) }()
      case 15: try { try decoder.decodeSingularInt32Field(value: &self._votedowncount) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._gid {
      try visitor.visitSingularUInt64Field(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._clanid {
      try visitor.visitSingularUInt64Field(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._posterid {
      try visitor.visitSingularUInt64Field(value: v, fieldNumber: 3)
    } }()
    try { if let v = self._headline {
      try visitor.visitSingularStringField(value: v, fieldNumber: 4)
    } }()
    try { if let v = self._posttime {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 5)
    } }()
    try { if let v = self._updatetime {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 6)
    } }()
    try { if let v = self._body {
      try visitor.visitSingularStringField(value: v, fieldNumber: 7)
    } }()
    try { if let v = self._commentcount {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 8)
    } }()
    if !self.tags.isEmpty {
      try visitor.visitRepeatedStringField(value: self.tags, fieldNumber: 9)
    }
    try { if let v = self._language {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 10)
    } }()
    try { if let v = self._hidden {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 11)
    } }()
    try { if let v = self._forumTopicID {
      try visitor.visitSingularFixed64Field(value: v, fieldNumber: 12)
    } }()
    try { if let v = self._eventGid {
      try visitor.visitSingularFixed64Field(value: v, fieldNumber: 13)
    } }()
    try { if let v = self._voteupcount {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 14)
    } }()
    try { if let v = self._votedowncount {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 15)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: CCommunity_ClanAnnouncementInfo, rhs: CCommunity_ClanAnnouncementInfo) -> Bool {
    if lhs._gid != rhs._gid {return false}
    if lhs._clanid != rhs._clanid {return false}
    if lhs._posterid != rhs._posterid {return false}
    if lhs._headline != rhs._headline {return false}
    if lhs._posttime != rhs._posttime {return false}
    if lhs._updatetime != rhs._updatetime {return false}
    if lhs._body != rhs._body {return false}
    if lhs._commentcount != rhs._commentcount {return false}
    if lhs.tags != rhs.tags {return false}
    if lhs._language != rhs._language {return false}
    if lhs._hidden != rhs._hidden {return false}
    if lhs._forumTopicID != rhs._forumTopicID {return false}
    if lhs._eventGid != rhs._eventGid {return false}
    if lhs._voteupcount != rhs._voteupcount {return false}
    if lhs._votedowncount != rhs._votedowncount {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension CClanEventData: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "CClanEventData"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "gid"),
    2: .standard(proto: "clan_steamid"),
    3: .standard(proto: "event_name"),
    4: .standard(proto: "event_type"),
    5: .same(proto: "appid"),
    6: .standard(proto: "server_address"),
    7: .standard(proto: "server_password"),
    8: .standard(proto: "rtime32_start_time"),
    9: .standard(proto: "rtime32_end_time"),
    10: .standard(proto: "comment_count"),
    11: .standard(proto: "creator_steamid"),
    12: .standard(proto: "last_update_steamid"),
    13: .standard(proto: "event_notes"),
    14: .same(proto: "jsondata"),
    15: .standard(proto: "announcement_body"),
    16: .same(proto: "published"),
    17: .same(proto: "hidden"),
    18: .standard(proto: "rtime32_visibility_start"),
    19: .standard(proto: "rtime32_visibility_end"),
    20: .standard(proto: "broadcaster_accountid"),
    21: .standard(proto: "follower_count"),
    22: .standard(proto: "ignore_count"),
    23: .standard(proto: "forum_topic_id"),
    24: .standard(proto: "rtime32_last_modified"),
    25: .standard(proto: "news_post_gid"),
    26: .standard(proto: "rtime_mod_reviewed"),
    27: .standard(proto: "featured_app_tagid"),
    28: .standard(proto: "referenced_appids"),
    29: .standard(proto: "build_id"),
    30: .standard(proto: "build_branch"),
  ]

  fileprivate class _StorageClass {
    var _gid: UInt64? = nil
    var _clanSteamid: UInt64? = nil
    var _eventName: String? = nil
    var _eventType: EProtoClanEventType? = nil
    var _appid: UInt32? = nil
    var _serverAddress: String? = nil
    var _serverPassword: String? = nil
    var _rtime32StartTime: UInt32? = nil
    var _rtime32EndTime: UInt32? = nil
    var _commentCount: Int32? = nil
    var _creatorSteamid: UInt64? = nil
    var _lastUpdateSteamid: UInt64? = nil
    var _eventNotes: String? = nil
    var _jsondata: String? = nil
    var _announcementBody: CCommunity_ClanAnnouncementInfo? = nil
    var _published: Bool? = nil
    var _hidden: Bool? = nil
    var _rtime32VisibilityStart: UInt32? = nil
    var _rtime32VisibilityEnd: UInt32? = nil
    var _broadcasterAccountid: UInt32? = nil
    var _followerCount: UInt32? = nil
    var _ignoreCount: UInt32? = nil
    var _forumTopicID: UInt64? = nil
    var _rtime32LastModified: UInt32? = nil
    var _newsPostGid: UInt64? = nil
    var _rtimeModReviewed: UInt32? = nil
    var _featuredAppTagid: UInt32? = nil
    var _referencedAppids: [UInt32] = []
    var _buildID: UInt32? = nil
    var _buildBranch: String? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _gid = source._gid
      _clanSteamid = source._clanSteamid
      _eventName = source._eventName
      _eventType = source._eventType
      _appid = source._appid
      _serverAddress = source._serverAddress
      _serverPassword = source._serverPassword
      _rtime32StartTime = source._rtime32StartTime
      _rtime32EndTime = source._rtime32EndTime
      _commentCount = source._commentCount
      _creatorSteamid = source._creatorSteamid
      _lastUpdateSteamid = source._lastUpdateSteamid
      _eventNotes = source._eventNotes
      _jsondata = source._jsondata
      _announcementBody = source._announcementBody
      _published = source._published
      _hidden = source._hidden
      _rtime32VisibilityStart = source._rtime32VisibilityStart
      _rtime32VisibilityEnd = source._rtime32VisibilityEnd
      _broadcasterAccountid = source._broadcasterAccountid
      _followerCount = source._followerCount
      _ignoreCount = source._ignoreCount
      _forumTopicID = source._forumTopicID
      _rtime32LastModified = source._rtime32LastModified
      _newsPostGid = source._newsPostGid
      _rtimeModReviewed = source._rtimeModReviewed
      _featuredAppTagid = source._featuredAppTagid
      _referencedAppids = source._referencedAppids
      _buildID = source._buildID
      _buildBranch = source._buildBranch
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularFixed64Field(value: &_storage._gid) }()
        case 2: try { try decoder.decodeSingularFixed64Field(value: &_storage._clanSteamid) }()
        case 3: try { try decoder.decodeSingularStringField(value: &_storage._eventName) }()
        case 4: try { try decoder.decodeSingularEnumField(value: &_storage._eventType) }()
        case 5: try { try decoder.decodeSingularUInt32Field(value: &_storage._appid) }()
        case 6: try { try decoder.decodeSingularStringField(value: &_storage._serverAddress) }()
        case 7: try { try decoder.decodeSingularStringField(value: &_storage._serverPassword) }()
        case 8: try { try decoder.decodeSingularUInt32Field(value: &_storage._rtime32StartTime) }()
        case 9: try { try decoder.decodeSingularUInt32Field(value: &_storage._rtime32EndTime) }()
        case 10: try { try decoder.decodeSingularInt32Field(value: &_storage._commentCount) }()
        case 11: try { try decoder.decodeSingularFixed64Field(value: &_storage._creatorSteamid) }()
        case 12: try { try decoder.decodeSingularFixed64Field(value: &_storage._lastUpdateSteamid) }()
        case 13: try { try decoder.decodeSingularStringField(value: &_storage._eventNotes) }()
        case 14: try { try decoder.decodeSingularStringField(value: &_storage._jsondata) }()
        case 15: try { try decoder.decodeSingularMessageField(value: &_storage._announcementBody) }()
        case 16: try { try decoder.decodeSingularBoolField(value: &_storage._published) }()
        case 17: try { try decoder.decodeSingularBoolField(value: &_storage._hidden) }()
        case 18: try { try decoder.decodeSingularUInt32Field(value: &_storage._rtime32VisibilityStart) }()
        case 19: try { try decoder.decodeSingularUInt32Field(value: &_storage._rtime32VisibilityEnd) }()
        case 20: try { try decoder.decodeSingularUInt32Field(value: &_storage._broadcasterAccountid) }()
        case 21: try { try decoder.decodeSingularUInt32Field(value: &_storage._followerCount) }()
        case 22: try { try decoder.decodeSingularUInt32Field(value: &_storage._ignoreCount) }()
        case 23: try { try decoder.decodeSingularFixed64Field(value: &_storage._forumTopicID) }()
        case 24: try { try decoder.decodeSingularUInt32Field(value: &_storage._rtime32LastModified) }()
        case 25: try { try decoder.decodeSingularFixed64Field(value: &_storage._newsPostGid) }()
        case 26: try { try decoder.decodeSingularUInt32Field(value: &_storage._rtimeModReviewed) }()
        case 27: try { try decoder.decodeSingularUInt32Field(value: &_storage._featuredAppTagid) }()
        case 28: try { try decoder.decodeRepeatedUInt32Field(value: &_storage._referencedAppids) }()
        case 29: try { try decoder.decodeSingularUInt32Field(value: &_storage._buildID) }()
        case 30: try { try decoder.decodeSingularStringField(value: &_storage._buildBranch) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      try { if let v = _storage._gid {
        try visitor.visitSingularFixed64Field(value: v, fieldNumber: 1)
      } }()
      try { if let v = _storage._clanSteamid {
        try visitor.visitSingularFixed64Field(value: v, fieldNumber: 2)
      } }()
      try { if let v = _storage._eventName {
        try visitor.visitSingularStringField(value: v, fieldNumber: 3)
      } }()
      try { if let v = _storage._eventType {
        try visitor.visitSingularEnumField(value: v, fieldNumber: 4)
      } }()
      try { if let v = _storage._appid {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 5)
      } }()
      try { if let v = _storage._serverAddress {
        try visitor.visitSingularStringField(value: v, fieldNumber: 6)
      } }()
      try { if let v = _storage._serverPassword {
        try visitor.visitSingularStringField(value: v, fieldNumber: 7)
      } }()
      try { if let v = _storage._rtime32StartTime {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 8)
      } }()
      try { if let v = _storage._rtime32EndTime {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 9)
      } }()
      try { if let v = _storage._commentCount {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 10)
      } }()
      try { if let v = _storage._creatorSteamid {
        try visitor.visitSingularFixed64Field(value: v, fieldNumber: 11)
      } }()
      try { if let v = _storage._lastUpdateSteamid {
        try visitor.visitSingularFixed64Field(value: v, fieldNumber: 12)
      } }()
      try { if let v = _storage._eventNotes {
        try visitor.visitSingularStringField(value: v, fieldNumber: 13)
      } }()
      try { if let v = _storage._jsondata {
        try visitor.visitSingularStringField(value: v, fieldNumber: 14)
      } }()
      try { if let v = _storage._announcementBody {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 15)
      } }()
      try { if let v = _storage._published {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 16)
      } }()
      try { if let v = _storage._hidden {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 17)
      } }()
      try { if let v = _storage._rtime32VisibilityStart {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 18)
      } }()
      try { if let v = _storage._rtime32VisibilityEnd {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 19)
      } }()
      try { if let v = _storage._broadcasterAccountid {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 20)
      } }()
      try { if let v = _storage._followerCount {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 21)
      } }()
      try { if let v = _storage._ignoreCount {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 22)
      } }()
      try { if let v = _storage._forumTopicID {
        try visitor.visitSingularFixed64Field(value: v, fieldNumber: 23)
      } }()
      try { if let v = _storage._rtime32LastModified {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 24)
      } }()
      try { if let v = _storage._newsPostGid {
        try visitor.visitSingularFixed64Field(value: v, fieldNumber: 25)
      } }()
      try { if let v = _storage._rtimeModReviewed {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 26)
      } }()
      try { if let v = _storage._featuredAppTagid {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 27)
      } }()
      if !_storage._referencedAppids.isEmpty {
        try visitor.visitRepeatedUInt32Field(value: _storage._referencedAppids, fieldNumber: 28)
      }
      try { if let v = _storage._buildID {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 29)
      } }()
      try { if let v = _storage._buildBranch {
        try visitor.visitSingularStringField(value: v, fieldNumber: 30)
      } }()
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: CClanEventData, rhs: CClanEventData) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._gid != rhs_storage._gid {return false}
        if _storage._clanSteamid != rhs_storage._clanSteamid {return false}
        if _storage._eventName != rhs_storage._eventName {return false}
        if _storage._eventType != rhs_storage._eventType {return false}
        if _storage._appid != rhs_storage._appid {return false}
        if _storage._serverAddress != rhs_storage._serverAddress {return false}
        if _storage._serverPassword != rhs_storage._serverPassword {return false}
        if _storage._rtime32StartTime != rhs_storage._rtime32StartTime {return false}
        if _storage._rtime32EndTime != rhs_storage._rtime32EndTime {return false}
        if _storage._commentCount != rhs_storage._commentCount {return false}
        if _storage._creatorSteamid != rhs_storage._creatorSteamid {return false}
        if _storage._lastUpdateSteamid != rhs_storage._lastUpdateSteamid {return false}
        if _storage._eventNotes != rhs_storage._eventNotes {return false}
        if _storage._jsondata != rhs_storage._jsondata {return false}
        if _storage._announcementBody != rhs_storage._announcementBody {return false}
        if _storage._published != rhs_storage._published {return false}
        if _storage._hidden != rhs_storage._hidden {return false}
        if _storage._rtime32VisibilityStart != rhs_storage._rtime32VisibilityStart {return false}
        if _storage._rtime32VisibilityEnd != rhs_storage._rtime32VisibilityEnd {return false}
        if _storage._broadcasterAccountid != rhs_storage._broadcasterAccountid {return false}
        if _storage._followerCount != rhs_storage._followerCount {return false}
        if _storage._ignoreCount != rhs_storage._ignoreCount {return false}
        if _storage._forumTopicID != rhs_storage._forumTopicID {return false}
        if _storage._rtime32LastModified != rhs_storage._rtime32LastModified {return false}
        if _storage._newsPostGid != rhs_storage._newsPostGid {return false}
        if _storage._rtimeModReviewed != rhs_storage._rtimeModReviewed {return false}
        if _storage._featuredAppTagid != rhs_storage._featuredAppTagid {return false}
        if _storage._referencedAppids != rhs_storage._referencedAppids {return false}
        if _storage._buildID != rhs_storage._buildID {return false}
        if _storage._buildBranch != rhs_storage._buildBranch {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension CBilling_Address: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "CBilling_Address"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "first_name"),
    2: .standard(proto: "last_name"),
    3: .same(proto: "address1"),
    4: .same(proto: "address2"),
    5: .same(proto: "city"),
    6: .standard(proto: "us_state"),
    7: .standard(proto: "country_code"),
    8: .same(proto: "postcode"),
    9: .standard(proto: "zip_plus4"),
    10: .same(proto: "phone"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self._firstName) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self._lastName) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self._address1) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self._address2) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self._city) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self._usState) }()
      case 7: try { try decoder.decodeSingularStringField(value: &self._countryCode) }()
      case 8: try { try decoder.decodeSingularStringField(value: &self._postcode) }()
      case 9: try { try decoder.decodeSingularInt32Field(value: &self._zipPlus4) }()
      case 10: try { try decoder.decodeSingularStringField(value: &self._phone) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._firstName {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._lastName {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._address1 {
      try visitor.visitSingularStringField(value: v, fieldNumber: 3)
    } }()
    try { if let v = self._address2 {
      try visitor.visitSingularStringField(value: v, fieldNumber: 4)
    } }()
    try { if let v = self._city {
      try visitor.visitSingularStringField(value: v, fieldNumber: 5)
    } }()
    try { if let v = self._usState {
      try visitor.visitSingularStringField(value: v, fieldNumber: 6)
    } }()
    try { if let v = self._countryCode {
      try visitor.visitSingularStringField(value: v, fieldNumber: 7)
    } }()
    try { if let v = self._postcode {
      try visitor.visitSingularStringField(value: v, fieldNumber: 8)
    } }()
    try { if let v = self._zipPlus4 {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 9)
    } }()
    try { if let v = self._phone {
      try visitor.visitSingularStringField(value: v, fieldNumber: 10)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: CBilling_Address, rhs: CBilling_Address) -> Bool {
    if lhs._firstName != rhs._firstName {return false}
    if lhs._lastName != rhs._lastName {return false}
    if lhs._address1 != rhs._address1 {return false}
    if lhs._address2 != rhs._address2 {return false}
    if lhs._city != rhs._city {return false}
    if lhs._usState != rhs._usState {return false}
    if lhs._countryCode != rhs._countryCode {return false}
    if lhs._postcode != rhs._postcode {return false}
    if lhs._zipPlus4 != rhs._zipPlus4 {return false}
    if lhs._phone != rhs._phone {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension CPackageReservationStatus: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "CPackageReservationStatus"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "packageid"),
    2: .standard(proto: "reservation_state"),
    3: .standard(proto: "queue_position"),
    4: .standard(proto: "total_queue_size"),
    5: .standard(proto: "reservation_country_code"),
    6: .same(proto: "expired"),
    7: .standard(proto: "time_expires"),
    8: .standard(proto: "time_reserved"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt32Field(value: &self._packageid) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self._reservationState) }()
      case 3: try { try decoder.decodeSingularInt32Field(value: &self._queuePosition) }()
      case 4: try { try decoder.decodeSingularInt32Field(value: &self._totalQueueSize) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self._reservationCountryCode) }()
      case 6: try { try decoder.decodeSingularBoolField(value: &self._expired) }()
      case 7: try { try decoder.decodeSingularUInt32Field(value: &self._timeExpires) }()
      case 8: try { try decoder.decodeSingularUInt32Field(value: &self._timeReserved) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._packageid {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._reservationState {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._queuePosition {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 3)
    } }()
    try { if let v = self._totalQueueSize {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 4)
    } }()
    try { if let v = self._reservationCountryCode {
      try visitor.visitSingularStringField(value: v, fieldNumber: 5)
    } }()
    try { if let v = self._expired {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 6)
    } }()
    try { if let v = self._timeExpires {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 7)
    } }()
    try { if let v = self._timeReserved {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 8)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: CPackageReservationStatus, rhs: CPackageReservationStatus) -> Bool {
    if lhs._packageid != rhs._packageid {return false}
    if lhs._reservationState != rhs._reservationState {return false}
    if lhs._queuePosition != rhs._queuePosition {return false}
    if lhs._totalQueueSize != rhs._totalQueueSize {return false}
    if lhs._reservationCountryCode != rhs._reservationCountryCode {return false}
    if lhs._expired != rhs._expired {return false}
    if lhs._timeExpires != rhs._timeExpires {return false}
    if lhs._timeReserved != rhs._timeReserved {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
