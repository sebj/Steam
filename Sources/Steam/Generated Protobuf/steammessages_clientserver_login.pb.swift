// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: steammessages_clientserver_login.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct CMsgClientHeartBeat {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var sendReply: Bool {
    get {return _sendReply ?? false}
    set {_sendReply = newValue}
  }
  /// Returns true if `sendReply` has been explicitly set.
  var hasSendReply: Bool {return self._sendReply != nil}
  /// Clears the value of `sendReply`. Subsequent reads from it will return its default value.
  mutating func clearSendReply() {self._sendReply = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _sendReply: Bool? = nil
}

struct CMsgClientServerTimestampRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var clientRequestTimestamp: UInt64 {
    get {return _clientRequestTimestamp ?? 0}
    set {_clientRequestTimestamp = newValue}
  }
  /// Returns true if `clientRequestTimestamp` has been explicitly set.
  var hasClientRequestTimestamp: Bool {return self._clientRequestTimestamp != nil}
  /// Clears the value of `clientRequestTimestamp`. Subsequent reads from it will return its default value.
  mutating func clearClientRequestTimestamp() {self._clientRequestTimestamp = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _clientRequestTimestamp: UInt64? = nil
}

struct CMsgClientServerTimestampResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var clientRequestTimestamp: UInt64 {
    get {return _clientRequestTimestamp ?? 0}
    set {_clientRequestTimestamp = newValue}
  }
  /// Returns true if `clientRequestTimestamp` has been explicitly set.
  var hasClientRequestTimestamp: Bool {return self._clientRequestTimestamp != nil}
  /// Clears the value of `clientRequestTimestamp`. Subsequent reads from it will return its default value.
  mutating func clearClientRequestTimestamp() {self._clientRequestTimestamp = nil}

  var serverTimestampMs: UInt64 {
    get {return _serverTimestampMs ?? 0}
    set {_serverTimestampMs = newValue}
  }
  /// Returns true if `serverTimestampMs` has been explicitly set.
  var hasServerTimestampMs: Bool {return self._serverTimestampMs != nil}
  /// Clears the value of `serverTimestampMs`. Subsequent reads from it will return its default value.
  mutating func clearServerTimestampMs() {self._serverTimestampMs = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _clientRequestTimestamp: UInt64? = nil
  fileprivate var _serverTimestampMs: UInt64? = nil
}

struct CMsgClientSecret {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var version: UInt32 {
    get {return _version ?? 0}
    set {_version = newValue}
  }
  /// Returns true if `version` has been explicitly set.
  var hasVersion: Bool {return self._version != nil}
  /// Clears the value of `version`. Subsequent reads from it will return its default value.
  mutating func clearVersion() {self._version = nil}

  var appid: UInt32 {
    get {return _appid ?? 0}
    set {_appid = newValue}
  }
  /// Returns true if `appid` has been explicitly set.
  var hasAppid: Bool {return self._appid != nil}
  /// Clears the value of `appid`. Subsequent reads from it will return its default value.
  mutating func clearAppid() {self._appid = nil}

  var deviceid: UInt32 {
    get {return _deviceid ?? 0}
    set {_deviceid = newValue}
  }
  /// Returns true if `deviceid` has been explicitly set.
  var hasDeviceid: Bool {return self._deviceid != nil}
  /// Clears the value of `deviceid`. Subsequent reads from it will return its default value.
  mutating func clearDeviceid() {self._deviceid = nil}

  var nonce: UInt64 {
    get {return _nonce ?? 0}
    set {_nonce = newValue}
  }
  /// Returns true if `nonce` has been explicitly set.
  var hasNonce: Bool {return self._nonce != nil}
  /// Clears the value of `nonce`. Subsequent reads from it will return its default value.
  mutating func clearNonce() {self._nonce = nil}

  var hmac: Data {
    get {return _hmac ?? Data()}
    set {_hmac = newValue}
  }
  /// Returns true if `hmac` has been explicitly set.
  var hasHmac: Bool {return self._hmac != nil}
  /// Clears the value of `hmac`. Subsequent reads from it will return its default value.
  mutating func clearHmac() {self._hmac = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _version: UInt32? = nil
  fileprivate var _appid: UInt32? = nil
  fileprivate var _deviceid: UInt32? = nil
  fileprivate var _nonce: UInt64? = nil
  fileprivate var _hmac: Data? = nil
}

struct CMsgClientLogon {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var protocolVersion: UInt32 {
    get {return _storage._protocolVersion ?? 0}
    set {_uniqueStorage()._protocolVersion = newValue}
  }
  /// Returns true if `protocolVersion` has been explicitly set.
  var hasProtocolVersion: Bool {return _storage._protocolVersion != nil}
  /// Clears the value of `protocolVersion`. Subsequent reads from it will return its default value.
  mutating func clearProtocolVersion() {_uniqueStorage()._protocolVersion = nil}

  var deprecatedObfustucatedPrivateIp: UInt32 {
    get {return _storage._deprecatedObfustucatedPrivateIp ?? 0}
    set {_uniqueStorage()._deprecatedObfustucatedPrivateIp = newValue}
  }
  /// Returns true if `deprecatedObfustucatedPrivateIp` has been explicitly set.
  var hasDeprecatedObfustucatedPrivateIp: Bool {return _storage._deprecatedObfustucatedPrivateIp != nil}
  /// Clears the value of `deprecatedObfustucatedPrivateIp`. Subsequent reads from it will return its default value.
  mutating func clearDeprecatedObfustucatedPrivateIp() {_uniqueStorage()._deprecatedObfustucatedPrivateIp = nil}

  var cellID: UInt32 {
    get {return _storage._cellID ?? 0}
    set {_uniqueStorage()._cellID = newValue}
  }
  /// Returns true if `cellID` has been explicitly set.
  var hasCellID: Bool {return _storage._cellID != nil}
  /// Clears the value of `cellID`. Subsequent reads from it will return its default value.
  mutating func clearCellID() {_uniqueStorage()._cellID = nil}

  var lastSessionID: UInt32 {
    get {return _storage._lastSessionID ?? 0}
    set {_uniqueStorage()._lastSessionID = newValue}
  }
  /// Returns true if `lastSessionID` has been explicitly set.
  var hasLastSessionID: Bool {return _storage._lastSessionID != nil}
  /// Clears the value of `lastSessionID`. Subsequent reads from it will return its default value.
  mutating func clearLastSessionID() {_uniqueStorage()._lastSessionID = nil}

  var clientPackageVersion: UInt32 {
    get {return _storage._clientPackageVersion ?? 0}
    set {_uniqueStorage()._clientPackageVersion = newValue}
  }
  /// Returns true if `clientPackageVersion` has been explicitly set.
  var hasClientPackageVersion: Bool {return _storage._clientPackageVersion != nil}
  /// Clears the value of `clientPackageVersion`. Subsequent reads from it will return its default value.
  mutating func clearClientPackageVersion() {_uniqueStorage()._clientPackageVersion = nil}

  var clientLanguage: String {
    get {return _storage._clientLanguage ?? String()}
    set {_uniqueStorage()._clientLanguage = newValue}
  }
  /// Returns true if `clientLanguage` has been explicitly set.
  var hasClientLanguage: Bool {return _storage._clientLanguage != nil}
  /// Clears the value of `clientLanguage`. Subsequent reads from it will return its default value.
  mutating func clearClientLanguage() {_uniqueStorage()._clientLanguage = nil}

  var clientOsType: UInt32 {
    get {return _storage._clientOsType ?? 0}
    set {_uniqueStorage()._clientOsType = newValue}
  }
  /// Returns true if `clientOsType` has been explicitly set.
  var hasClientOsType: Bool {return _storage._clientOsType != nil}
  /// Clears the value of `clientOsType`. Subsequent reads from it will return its default value.
  mutating func clearClientOsType() {_uniqueStorage()._clientOsType = nil}

  var shouldRememberPassword: Bool {
    get {return _storage._shouldRememberPassword ?? false}
    set {_uniqueStorage()._shouldRememberPassword = newValue}
  }
  /// Returns true if `shouldRememberPassword` has been explicitly set.
  var hasShouldRememberPassword: Bool {return _storage._shouldRememberPassword != nil}
  /// Clears the value of `shouldRememberPassword`. Subsequent reads from it will return its default value.
  mutating func clearShouldRememberPassword() {_uniqueStorage()._shouldRememberPassword = nil}

  var wineVersion: String {
    get {return _storage._wineVersion ?? String()}
    set {_uniqueStorage()._wineVersion = newValue}
  }
  /// Returns true if `wineVersion` has been explicitly set.
  var hasWineVersion: Bool {return _storage._wineVersion != nil}
  /// Clears the value of `wineVersion`. Subsequent reads from it will return its default value.
  mutating func clearWineVersion() {_uniqueStorage()._wineVersion = nil}

  var deprecated10: UInt32 {
    get {return _storage._deprecated10 ?? 0}
    set {_uniqueStorage()._deprecated10 = newValue}
  }
  /// Returns true if `deprecated10` has been explicitly set.
  var hasDeprecated10: Bool {return _storage._deprecated10 != nil}
  /// Clears the value of `deprecated10`. Subsequent reads from it will return its default value.
  mutating func clearDeprecated10() {_uniqueStorage()._deprecated10 = nil}

  var obfuscatedPrivateIp: CMsgIPAddress {
    get {return _storage._obfuscatedPrivateIp ?? CMsgIPAddress()}
    set {_uniqueStorage()._obfuscatedPrivateIp = newValue}
  }
  /// Returns true if `obfuscatedPrivateIp` has been explicitly set.
  var hasObfuscatedPrivateIp: Bool {return _storage._obfuscatedPrivateIp != nil}
  /// Clears the value of `obfuscatedPrivateIp`. Subsequent reads from it will return its default value.
  mutating func clearObfuscatedPrivateIp() {_uniqueStorage()._obfuscatedPrivateIp = nil}

  var deprecatedPublicIp: UInt32 {
    get {return _storage._deprecatedPublicIp ?? 0}
    set {_uniqueStorage()._deprecatedPublicIp = newValue}
  }
  /// Returns true if `deprecatedPublicIp` has been explicitly set.
  var hasDeprecatedPublicIp: Bool {return _storage._deprecatedPublicIp != nil}
  /// Clears the value of `deprecatedPublicIp`. Subsequent reads from it will return its default value.
  mutating func clearDeprecatedPublicIp() {_uniqueStorage()._deprecatedPublicIp = nil}

  var qosLevel: UInt32 {
    get {return _storage._qosLevel ?? 0}
    set {_uniqueStorage()._qosLevel = newValue}
  }
  /// Returns true if `qosLevel` has been explicitly set.
  var hasQosLevel: Bool {return _storage._qosLevel != nil}
  /// Clears the value of `qosLevel`. Subsequent reads from it will return its default value.
  mutating func clearQosLevel() {_uniqueStorage()._qosLevel = nil}

  var clientSuppliedSteamID: UInt64 {
    get {return _storage._clientSuppliedSteamID ?? 0}
    set {_uniqueStorage()._clientSuppliedSteamID = newValue}
  }
  /// Returns true if `clientSuppliedSteamID` has been explicitly set.
  var hasClientSuppliedSteamID: Bool {return _storage._clientSuppliedSteamID != nil}
  /// Clears the value of `clientSuppliedSteamID`. Subsequent reads from it will return its default value.
  mutating func clearClientSuppliedSteamID() {_uniqueStorage()._clientSuppliedSteamID = nil}

  var publicIp: CMsgIPAddress {
    get {return _storage._publicIp ?? CMsgIPAddress()}
    set {_uniqueStorage()._publicIp = newValue}
  }
  /// Returns true if `publicIp` has been explicitly set.
  var hasPublicIp: Bool {return _storage._publicIp != nil}
  /// Clears the value of `publicIp`. Subsequent reads from it will return its default value.
  mutating func clearPublicIp() {_uniqueStorage()._publicIp = nil}

  var machineID: Data {
    get {return _storage._machineID ?? Data()}
    set {_uniqueStorage()._machineID = newValue}
  }
  /// Returns true if `machineID` has been explicitly set.
  var hasMachineID: Bool {return _storage._machineID != nil}
  /// Clears the value of `machineID`. Subsequent reads from it will return its default value.
  mutating func clearMachineID() {_uniqueStorage()._machineID = nil}

  var launcherType: UInt32 {
    get {return _storage._launcherType ?? 0}
    set {_uniqueStorage()._launcherType = newValue}
  }
  /// Returns true if `launcherType` has been explicitly set.
  var hasLauncherType: Bool {return _storage._launcherType != nil}
  /// Clears the value of `launcherType`. Subsequent reads from it will return its default value.
  mutating func clearLauncherType() {_uniqueStorage()._launcherType = nil}

  var uiMode: UInt32 {
    get {return _storage._uiMode ?? 0}
    set {_uniqueStorage()._uiMode = newValue}
  }
  /// Returns true if `uiMode` has been explicitly set.
  var hasUiMode: Bool {return _storage._uiMode != nil}
  /// Clears the value of `uiMode`. Subsequent reads from it will return its default value.
  mutating func clearUiMode() {_uniqueStorage()._uiMode = nil}

  var chatMode: UInt32 {
    get {return _storage._chatMode ?? 0}
    set {_uniqueStorage()._chatMode = newValue}
  }
  /// Returns true if `chatMode` has been explicitly set.
  var hasChatMode: Bool {return _storage._chatMode != nil}
  /// Clears the value of `chatMode`. Subsequent reads from it will return its default value.
  mutating func clearChatMode() {_uniqueStorage()._chatMode = nil}

  var steam2AuthTicket: Data {
    get {return _storage._steam2AuthTicket ?? Data()}
    set {_uniqueStorage()._steam2AuthTicket = newValue}
  }
  /// Returns true if `steam2AuthTicket` has been explicitly set.
  var hasSteam2AuthTicket: Bool {return _storage._steam2AuthTicket != nil}
  /// Clears the value of `steam2AuthTicket`. Subsequent reads from it will return its default value.
  mutating func clearSteam2AuthTicket() {_uniqueStorage()._steam2AuthTicket = nil}

  var emailAddress: String {
    get {return _storage._emailAddress ?? String()}
    set {_uniqueStorage()._emailAddress = newValue}
  }
  /// Returns true if `emailAddress` has been explicitly set.
  var hasEmailAddress: Bool {return _storage._emailAddress != nil}
  /// Clears the value of `emailAddress`. Subsequent reads from it will return its default value.
  mutating func clearEmailAddress() {_uniqueStorage()._emailAddress = nil}

  var rtime32AccountCreation: UInt32 {
    get {return _storage._rtime32AccountCreation ?? 0}
    set {_uniqueStorage()._rtime32AccountCreation = newValue}
  }
  /// Returns true if `rtime32AccountCreation` has been explicitly set.
  var hasRtime32AccountCreation: Bool {return _storage._rtime32AccountCreation != nil}
  /// Clears the value of `rtime32AccountCreation`. Subsequent reads from it will return its default value.
  mutating func clearRtime32AccountCreation() {_uniqueStorage()._rtime32AccountCreation = nil}

  var accountName: String {
    get {return _storage._accountName ?? String()}
    set {_uniqueStorage()._accountName = newValue}
  }
  /// Returns true if `accountName` has been explicitly set.
  var hasAccountName: Bool {return _storage._accountName != nil}
  /// Clears the value of `accountName`. Subsequent reads from it will return its default value.
  mutating func clearAccountName() {_uniqueStorage()._accountName = nil}

  var password: String {
    get {return _storage._password ?? String()}
    set {_uniqueStorage()._password = newValue}
  }
  /// Returns true if `password` has been explicitly set.
  var hasPassword: Bool {return _storage._password != nil}
  /// Clears the value of `password`. Subsequent reads from it will return its default value.
  mutating func clearPassword() {_uniqueStorage()._password = nil}

  var gameServerToken: String {
    get {return _storage._gameServerToken ?? String()}
    set {_uniqueStorage()._gameServerToken = newValue}
  }
  /// Returns true if `gameServerToken` has been explicitly set.
  var hasGameServerToken: Bool {return _storage._gameServerToken != nil}
  /// Clears the value of `gameServerToken`. Subsequent reads from it will return its default value.
  mutating func clearGameServerToken() {_uniqueStorage()._gameServerToken = nil}

  var loginKey: String {
    get {return _storage._loginKey ?? String()}
    set {_uniqueStorage()._loginKey = newValue}
  }
  /// Returns true if `loginKey` has been explicitly set.
  var hasLoginKey: Bool {return _storage._loginKey != nil}
  /// Clears the value of `loginKey`. Subsequent reads from it will return its default value.
  mutating func clearLoginKey() {_uniqueStorage()._loginKey = nil}

  var wasConvertedDeprecatedMsg: Bool {
    get {return _storage._wasConvertedDeprecatedMsg ?? false}
    set {_uniqueStorage()._wasConvertedDeprecatedMsg = newValue}
  }
  /// Returns true if `wasConvertedDeprecatedMsg` has been explicitly set.
  var hasWasConvertedDeprecatedMsg: Bool {return _storage._wasConvertedDeprecatedMsg != nil}
  /// Clears the value of `wasConvertedDeprecatedMsg`. Subsequent reads from it will return its default value.
  mutating func clearWasConvertedDeprecatedMsg() {_uniqueStorage()._wasConvertedDeprecatedMsg = nil}

  var anonUserTargetAccountName: String {
    get {return _storage._anonUserTargetAccountName ?? String()}
    set {_uniqueStorage()._anonUserTargetAccountName = newValue}
  }
  /// Returns true if `anonUserTargetAccountName` has been explicitly set.
  var hasAnonUserTargetAccountName: Bool {return _storage._anonUserTargetAccountName != nil}
  /// Clears the value of `anonUserTargetAccountName`. Subsequent reads from it will return its default value.
  mutating func clearAnonUserTargetAccountName() {_uniqueStorage()._anonUserTargetAccountName = nil}

  var resolvedUserSteamID: UInt64 {
    get {return _storage._resolvedUserSteamID ?? 0}
    set {_uniqueStorage()._resolvedUserSteamID = newValue}
  }
  /// Returns true if `resolvedUserSteamID` has been explicitly set.
  var hasResolvedUserSteamID: Bool {return _storage._resolvedUserSteamID != nil}
  /// Clears the value of `resolvedUserSteamID`. Subsequent reads from it will return its default value.
  mutating func clearResolvedUserSteamID() {_uniqueStorage()._resolvedUserSteamID = nil}

  var eresultSentryfile: Int32 {
    get {return _storage._eresultSentryfile ?? 0}
    set {_uniqueStorage()._eresultSentryfile = newValue}
  }
  /// Returns true if `eresultSentryfile` has been explicitly set.
  var hasEresultSentryfile: Bool {return _storage._eresultSentryfile != nil}
  /// Clears the value of `eresultSentryfile`. Subsequent reads from it will return its default value.
  mutating func clearEresultSentryfile() {_uniqueStorage()._eresultSentryfile = nil}

  var shaSentryfile: Data {
    get {return _storage._shaSentryfile ?? Data()}
    set {_uniqueStorage()._shaSentryfile = newValue}
  }
  /// Returns true if `shaSentryfile` has been explicitly set.
  var hasShaSentryfile: Bool {return _storage._shaSentryfile != nil}
  /// Clears the value of `shaSentryfile`. Subsequent reads from it will return its default value.
  mutating func clearShaSentryfile() {_uniqueStorage()._shaSentryfile = nil}

  var authCode: String {
    get {return _storage._authCode ?? String()}
    set {_uniqueStorage()._authCode = newValue}
  }
  /// Returns true if `authCode` has been explicitly set.
  var hasAuthCode: Bool {return _storage._authCode != nil}
  /// Clears the value of `authCode`. Subsequent reads from it will return its default value.
  mutating func clearAuthCode() {_uniqueStorage()._authCode = nil}

  var otpType: Int32 {
    get {return _storage._otpType ?? 0}
    set {_uniqueStorage()._otpType = newValue}
  }
  /// Returns true if `otpType` has been explicitly set.
  var hasOtpType: Bool {return _storage._otpType != nil}
  /// Clears the value of `otpType`. Subsequent reads from it will return its default value.
  mutating func clearOtpType() {_uniqueStorage()._otpType = nil}

  var otpValue: UInt32 {
    get {return _storage._otpValue ?? 0}
    set {_uniqueStorage()._otpValue = newValue}
  }
  /// Returns true if `otpValue` has been explicitly set.
  var hasOtpValue: Bool {return _storage._otpValue != nil}
  /// Clears the value of `otpValue`. Subsequent reads from it will return its default value.
  mutating func clearOtpValue() {_uniqueStorage()._otpValue = nil}

  var otpIdentifier: String {
    get {return _storage._otpIdentifier ?? String()}
    set {_uniqueStorage()._otpIdentifier = newValue}
  }
  /// Returns true if `otpIdentifier` has been explicitly set.
  var hasOtpIdentifier: Bool {return _storage._otpIdentifier != nil}
  /// Clears the value of `otpIdentifier`. Subsequent reads from it will return its default value.
  mutating func clearOtpIdentifier() {_uniqueStorage()._otpIdentifier = nil}

  var steam2TicketRequest: Bool {
    get {return _storage._steam2TicketRequest ?? false}
    set {_uniqueStorage()._steam2TicketRequest = newValue}
  }
  /// Returns true if `steam2TicketRequest` has been explicitly set.
  var hasSteam2TicketRequest: Bool {return _storage._steam2TicketRequest != nil}
  /// Clears the value of `steam2TicketRequest`. Subsequent reads from it will return its default value.
  mutating func clearSteam2TicketRequest() {_uniqueStorage()._steam2TicketRequest = nil}

  var sonyPsnTicket: Data {
    get {return _storage._sonyPsnTicket ?? Data()}
    set {_uniqueStorage()._sonyPsnTicket = newValue}
  }
  /// Returns true if `sonyPsnTicket` has been explicitly set.
  var hasSonyPsnTicket: Bool {return _storage._sonyPsnTicket != nil}
  /// Clears the value of `sonyPsnTicket`. Subsequent reads from it will return its default value.
  mutating func clearSonyPsnTicket() {_uniqueStorage()._sonyPsnTicket = nil}

  var sonyPsnServiceID: String {
    get {return _storage._sonyPsnServiceID ?? String()}
    set {_uniqueStorage()._sonyPsnServiceID = newValue}
  }
  /// Returns true if `sonyPsnServiceID` has been explicitly set.
  var hasSonyPsnServiceID: Bool {return _storage._sonyPsnServiceID != nil}
  /// Clears the value of `sonyPsnServiceID`. Subsequent reads from it will return its default value.
  mutating func clearSonyPsnServiceID() {_uniqueStorage()._sonyPsnServiceID = nil}

  var createNewPsnLinkedAccountIfNeeded: Bool {
    get {return _storage._createNewPsnLinkedAccountIfNeeded ?? false}
    set {_uniqueStorage()._createNewPsnLinkedAccountIfNeeded = newValue}
  }
  /// Returns true if `createNewPsnLinkedAccountIfNeeded` has been explicitly set.
  var hasCreateNewPsnLinkedAccountIfNeeded: Bool {return _storage._createNewPsnLinkedAccountIfNeeded != nil}
  /// Clears the value of `createNewPsnLinkedAccountIfNeeded`. Subsequent reads from it will return its default value.
  mutating func clearCreateNewPsnLinkedAccountIfNeeded() {_uniqueStorage()._createNewPsnLinkedAccountIfNeeded = nil}

  var sonyPsnName: String {
    get {return _storage._sonyPsnName ?? String()}
    set {_uniqueStorage()._sonyPsnName = newValue}
  }
  /// Returns true if `sonyPsnName` has been explicitly set.
  var hasSonyPsnName: Bool {return _storage._sonyPsnName != nil}
  /// Clears the value of `sonyPsnName`. Subsequent reads from it will return its default value.
  mutating func clearSonyPsnName() {_uniqueStorage()._sonyPsnName = nil}

  var gameServerAppID: Int32 {
    get {return _storage._gameServerAppID ?? 0}
    set {_uniqueStorage()._gameServerAppID = newValue}
  }
  /// Returns true if `gameServerAppID` has been explicitly set.
  var hasGameServerAppID: Bool {return _storage._gameServerAppID != nil}
  /// Clears the value of `gameServerAppID`. Subsequent reads from it will return its default value.
  mutating func clearGameServerAppID() {_uniqueStorage()._gameServerAppID = nil}

  var steamguardDontRememberComputer: Bool {
    get {return _storage._steamguardDontRememberComputer ?? false}
    set {_uniqueStorage()._steamguardDontRememberComputer = newValue}
  }
  /// Returns true if `steamguardDontRememberComputer` has been explicitly set.
  var hasSteamguardDontRememberComputer: Bool {return _storage._steamguardDontRememberComputer != nil}
  /// Clears the value of `steamguardDontRememberComputer`. Subsequent reads from it will return its default value.
  mutating func clearSteamguardDontRememberComputer() {_uniqueStorage()._steamguardDontRememberComputer = nil}

  var machineName: String {
    get {return _storage._machineName ?? String()}
    set {_uniqueStorage()._machineName = newValue}
  }
  /// Returns true if `machineName` has been explicitly set.
  var hasMachineName: Bool {return _storage._machineName != nil}
  /// Clears the value of `machineName`. Subsequent reads from it will return its default value.
  mutating func clearMachineName() {_uniqueStorage()._machineName = nil}

  var machineNameUserchosen: String {
    get {return _storage._machineNameUserchosen ?? String()}
    set {_uniqueStorage()._machineNameUserchosen = newValue}
  }
  /// Returns true if `machineNameUserchosen` has been explicitly set.
  var hasMachineNameUserchosen: Bool {return _storage._machineNameUserchosen != nil}
  /// Clears the value of `machineNameUserchosen`. Subsequent reads from it will return its default value.
  mutating func clearMachineNameUserchosen() {_uniqueStorage()._machineNameUserchosen = nil}

  var countryOverride: String {
    get {return _storage._countryOverride ?? String()}
    set {_uniqueStorage()._countryOverride = newValue}
  }
  /// Returns true if `countryOverride` has been explicitly set.
  var hasCountryOverride: Bool {return _storage._countryOverride != nil}
  /// Clears the value of `countryOverride`. Subsequent reads from it will return its default value.
  mutating func clearCountryOverride() {_uniqueStorage()._countryOverride = nil}

  var isSteamBox: Bool {
    get {return _storage._isSteamBox ?? false}
    set {_uniqueStorage()._isSteamBox = newValue}
  }
  /// Returns true if `isSteamBox` has been explicitly set.
  var hasIsSteamBox: Bool {return _storage._isSteamBox != nil}
  /// Clears the value of `isSteamBox`. Subsequent reads from it will return its default value.
  mutating func clearIsSteamBox() {_uniqueStorage()._isSteamBox = nil}

  var clientInstanceID: UInt64 {
    get {return _storage._clientInstanceID ?? 0}
    set {_uniqueStorage()._clientInstanceID = newValue}
  }
  /// Returns true if `clientInstanceID` has been explicitly set.
  var hasClientInstanceID: Bool {return _storage._clientInstanceID != nil}
  /// Clears the value of `clientInstanceID`. Subsequent reads from it will return its default value.
  mutating func clearClientInstanceID() {_uniqueStorage()._clientInstanceID = nil}

  var twoFactorCode: String {
    get {return _storage._twoFactorCode ?? String()}
    set {_uniqueStorage()._twoFactorCode = newValue}
  }
  /// Returns true if `twoFactorCode` has been explicitly set.
  var hasTwoFactorCode: Bool {return _storage._twoFactorCode != nil}
  /// Clears the value of `twoFactorCode`. Subsequent reads from it will return its default value.
  mutating func clearTwoFactorCode() {_uniqueStorage()._twoFactorCode = nil}

  var supportsRateLimitResponse: Bool {
    get {return _storage._supportsRateLimitResponse ?? false}
    set {_uniqueStorage()._supportsRateLimitResponse = newValue}
  }
  /// Returns true if `supportsRateLimitResponse` has been explicitly set.
  var hasSupportsRateLimitResponse: Bool {return _storage._supportsRateLimitResponse != nil}
  /// Clears the value of `supportsRateLimitResponse`. Subsequent reads from it will return its default value.
  mutating func clearSupportsRateLimitResponse() {_uniqueStorage()._supportsRateLimitResponse = nil}

  var webLogonNonce: String {
    get {return _storage._webLogonNonce ?? String()}
    set {_uniqueStorage()._webLogonNonce = newValue}
  }
  /// Returns true if `webLogonNonce` has been explicitly set.
  var hasWebLogonNonce: Bool {return _storage._webLogonNonce != nil}
  /// Clears the value of `webLogonNonce`. Subsequent reads from it will return its default value.
  mutating func clearWebLogonNonce() {_uniqueStorage()._webLogonNonce = nil}

  var priorityReason: Int32 {
    get {return _storage._priorityReason ?? 0}
    set {_uniqueStorage()._priorityReason = newValue}
  }
  /// Returns true if `priorityReason` has been explicitly set.
  var hasPriorityReason: Bool {return _storage._priorityReason != nil}
  /// Clears the value of `priorityReason`. Subsequent reads from it will return its default value.
  mutating func clearPriorityReason() {_uniqueStorage()._priorityReason = nil}

  var embeddedClientSecret: CMsgClientSecret {
    get {return _storage._embeddedClientSecret ?? CMsgClientSecret()}
    set {_uniqueStorage()._embeddedClientSecret = newValue}
  }
  /// Returns true if `embeddedClientSecret` has been explicitly set.
  var hasEmbeddedClientSecret: Bool {return _storage._embeddedClientSecret != nil}
  /// Clears the value of `embeddedClientSecret`. Subsequent reads from it will return its default value.
  mutating func clearEmbeddedClientSecret() {_uniqueStorage()._embeddedClientSecret = nil}

  var disablePartnerAutogrants: Bool {
    get {return _storage._disablePartnerAutogrants ?? false}
    set {_uniqueStorage()._disablePartnerAutogrants = newValue}
  }
  /// Returns true if `disablePartnerAutogrants` has been explicitly set.
  var hasDisablePartnerAutogrants: Bool {return _storage._disablePartnerAutogrants != nil}
  /// Clears the value of `disablePartnerAutogrants`. Subsequent reads from it will return its default value.
  mutating func clearDisablePartnerAutogrants() {_uniqueStorage()._disablePartnerAutogrants = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct CMsgClientLogonResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var eresult: Int32 {
    get {return _storage._eresult ?? 2}
    set {_uniqueStorage()._eresult = newValue}
  }
  /// Returns true if `eresult` has been explicitly set.
  var hasEresult: Bool {return _storage._eresult != nil}
  /// Clears the value of `eresult`. Subsequent reads from it will return its default value.
  mutating func clearEresult() {_uniqueStorage()._eresult = nil}

  var outOfGameHeartbeatSeconds: Int32 {
    get {return _storage._outOfGameHeartbeatSeconds ?? 0}
    set {_uniqueStorage()._outOfGameHeartbeatSeconds = newValue}
  }
  /// Returns true if `outOfGameHeartbeatSeconds` has been explicitly set.
  var hasOutOfGameHeartbeatSeconds: Bool {return _storage._outOfGameHeartbeatSeconds != nil}
  /// Clears the value of `outOfGameHeartbeatSeconds`. Subsequent reads from it will return its default value.
  mutating func clearOutOfGameHeartbeatSeconds() {_uniqueStorage()._outOfGameHeartbeatSeconds = nil}

  var inGameHeartbeatSeconds: Int32 {
    get {return _storage._inGameHeartbeatSeconds ?? 0}
    set {_uniqueStorage()._inGameHeartbeatSeconds = newValue}
  }
  /// Returns true if `inGameHeartbeatSeconds` has been explicitly set.
  var hasInGameHeartbeatSeconds: Bool {return _storage._inGameHeartbeatSeconds != nil}
  /// Clears the value of `inGameHeartbeatSeconds`. Subsequent reads from it will return its default value.
  mutating func clearInGameHeartbeatSeconds() {_uniqueStorage()._inGameHeartbeatSeconds = nil}

  var deprecatedPublicIp: UInt32 {
    get {return _storage._deprecatedPublicIp ?? 0}
    set {_uniqueStorage()._deprecatedPublicIp = newValue}
  }
  /// Returns true if `deprecatedPublicIp` has been explicitly set.
  var hasDeprecatedPublicIp: Bool {return _storage._deprecatedPublicIp != nil}
  /// Clears the value of `deprecatedPublicIp`. Subsequent reads from it will return its default value.
  mutating func clearDeprecatedPublicIp() {_uniqueStorage()._deprecatedPublicIp = nil}

  var rtime32ServerTime: UInt32 {
    get {return _storage._rtime32ServerTime ?? 0}
    set {_uniqueStorage()._rtime32ServerTime = newValue}
  }
  /// Returns true if `rtime32ServerTime` has been explicitly set.
  var hasRtime32ServerTime: Bool {return _storage._rtime32ServerTime != nil}
  /// Clears the value of `rtime32ServerTime`. Subsequent reads from it will return its default value.
  mutating func clearRtime32ServerTime() {_uniqueStorage()._rtime32ServerTime = nil}

  var accountFlags: UInt32 {
    get {return _storage._accountFlags ?? 0}
    set {_uniqueStorage()._accountFlags = newValue}
  }
  /// Returns true if `accountFlags` has been explicitly set.
  var hasAccountFlags: Bool {return _storage._accountFlags != nil}
  /// Clears the value of `accountFlags`. Subsequent reads from it will return its default value.
  mutating func clearAccountFlags() {_uniqueStorage()._accountFlags = nil}

  var cellID: UInt32 {
    get {return _storage._cellID ?? 0}
    set {_uniqueStorage()._cellID = newValue}
  }
  /// Returns true if `cellID` has been explicitly set.
  var hasCellID: Bool {return _storage._cellID != nil}
  /// Clears the value of `cellID`. Subsequent reads from it will return its default value.
  mutating func clearCellID() {_uniqueStorage()._cellID = nil}

  var emailDomain: String {
    get {return _storage._emailDomain ?? String()}
    set {_uniqueStorage()._emailDomain = newValue}
  }
  /// Returns true if `emailDomain` has been explicitly set.
  var hasEmailDomain: Bool {return _storage._emailDomain != nil}
  /// Clears the value of `emailDomain`. Subsequent reads from it will return its default value.
  mutating func clearEmailDomain() {_uniqueStorage()._emailDomain = nil}

  var steam2Ticket: Data {
    get {return _storage._steam2Ticket ?? Data()}
    set {_uniqueStorage()._steam2Ticket = newValue}
  }
  /// Returns true if `steam2Ticket` has been explicitly set.
  var hasSteam2Ticket: Bool {return _storage._steam2Ticket != nil}
  /// Clears the value of `steam2Ticket`. Subsequent reads from it will return its default value.
  mutating func clearSteam2Ticket() {_uniqueStorage()._steam2Ticket = nil}

  var eresultExtended: Int32 {
    get {return _storage._eresultExtended ?? 0}
    set {_uniqueStorage()._eresultExtended = newValue}
  }
  /// Returns true if `eresultExtended` has been explicitly set.
  var hasEresultExtended: Bool {return _storage._eresultExtended != nil}
  /// Clears the value of `eresultExtended`. Subsequent reads from it will return its default value.
  mutating func clearEresultExtended() {_uniqueStorage()._eresultExtended = nil}

  var webapiAuthenticateUserNonce: String {
    get {return _storage._webapiAuthenticateUserNonce ?? String()}
    set {_uniqueStorage()._webapiAuthenticateUserNonce = newValue}
  }
  /// Returns true if `webapiAuthenticateUserNonce` has been explicitly set.
  var hasWebapiAuthenticateUserNonce: Bool {return _storage._webapiAuthenticateUserNonce != nil}
  /// Clears the value of `webapiAuthenticateUserNonce`. Subsequent reads from it will return its default value.
  mutating func clearWebapiAuthenticateUserNonce() {_uniqueStorage()._webapiAuthenticateUserNonce = nil}

  var cellIDPingThreshold: UInt32 {
    get {return _storage._cellIDPingThreshold ?? 0}
    set {_uniqueStorage()._cellIDPingThreshold = newValue}
  }
  /// Returns true if `cellIDPingThreshold` has been explicitly set.
  var hasCellIDPingThreshold: Bool {return _storage._cellIDPingThreshold != nil}
  /// Clears the value of `cellIDPingThreshold`. Subsequent reads from it will return its default value.
  mutating func clearCellIDPingThreshold() {_uniqueStorage()._cellIDPingThreshold = nil}

  var deprecatedUsePics: Bool {
    get {return _storage._deprecatedUsePics ?? false}
    set {_uniqueStorage()._deprecatedUsePics = newValue}
  }
  /// Returns true if `deprecatedUsePics` has been explicitly set.
  var hasDeprecatedUsePics: Bool {return _storage._deprecatedUsePics != nil}
  /// Clears the value of `deprecatedUsePics`. Subsequent reads from it will return its default value.
  mutating func clearDeprecatedUsePics() {_uniqueStorage()._deprecatedUsePics = nil}

  var vanityURL: String {
    get {return _storage._vanityURL ?? String()}
    set {_uniqueStorage()._vanityURL = newValue}
  }
  /// Returns true if `vanityURL` has been explicitly set.
  var hasVanityURL: Bool {return _storage._vanityURL != nil}
  /// Clears the value of `vanityURL`. Subsequent reads from it will return its default value.
  mutating func clearVanityURL() {_uniqueStorage()._vanityURL = nil}

  var publicIp: CMsgIPAddress {
    get {return _storage._publicIp ?? CMsgIPAddress()}
    set {_uniqueStorage()._publicIp = newValue}
  }
  /// Returns true if `publicIp` has been explicitly set.
  var hasPublicIp: Bool {return _storage._publicIp != nil}
  /// Clears the value of `publicIp`. Subsequent reads from it will return its default value.
  mutating func clearPublicIp() {_uniqueStorage()._publicIp = nil}

  var clientSuppliedSteamid: UInt64 {
    get {return _storage._clientSuppliedSteamid ?? 0}
    set {_uniqueStorage()._clientSuppliedSteamid = newValue}
  }
  /// Returns true if `clientSuppliedSteamid` has been explicitly set.
  var hasClientSuppliedSteamid: Bool {return _storage._clientSuppliedSteamid != nil}
  /// Clears the value of `clientSuppliedSteamid`. Subsequent reads from it will return its default value.
  mutating func clearClientSuppliedSteamid() {_uniqueStorage()._clientSuppliedSteamid = nil}

  var ipCountryCode: String {
    get {return _storage._ipCountryCode ?? String()}
    set {_uniqueStorage()._ipCountryCode = newValue}
  }
  /// Returns true if `ipCountryCode` has been explicitly set.
  var hasIpCountryCode: Bool {return _storage._ipCountryCode != nil}
  /// Clears the value of `ipCountryCode`. Subsequent reads from it will return its default value.
  mutating func clearIpCountryCode() {_uniqueStorage()._ipCountryCode = nil}

  var parentalSettings: Data {
    get {return _storage._parentalSettings ?? Data()}
    set {_uniqueStorage()._parentalSettings = newValue}
  }
  /// Returns true if `parentalSettings` has been explicitly set.
  var hasParentalSettings: Bool {return _storage._parentalSettings != nil}
  /// Clears the value of `parentalSettings`. Subsequent reads from it will return its default value.
  mutating func clearParentalSettings() {_uniqueStorage()._parentalSettings = nil}

  var parentalSettingSignature: Data {
    get {return _storage._parentalSettingSignature ?? Data()}
    set {_uniqueStorage()._parentalSettingSignature = newValue}
  }
  /// Returns true if `parentalSettingSignature` has been explicitly set.
  var hasParentalSettingSignature: Bool {return _storage._parentalSettingSignature != nil}
  /// Clears the value of `parentalSettingSignature`. Subsequent reads from it will return its default value.
  mutating func clearParentalSettingSignature() {_uniqueStorage()._parentalSettingSignature = nil}

  var countLoginfailuresToMigrate: Int32 {
    get {return _storage._countLoginfailuresToMigrate ?? 0}
    set {_uniqueStorage()._countLoginfailuresToMigrate = newValue}
  }
  /// Returns true if `countLoginfailuresToMigrate` has been explicitly set.
  var hasCountLoginfailuresToMigrate: Bool {return _storage._countLoginfailuresToMigrate != nil}
  /// Clears the value of `countLoginfailuresToMigrate`. Subsequent reads from it will return its default value.
  mutating func clearCountLoginfailuresToMigrate() {_uniqueStorage()._countLoginfailuresToMigrate = nil}

  var countDisconnectsToMigrate: Int32 {
    get {return _storage._countDisconnectsToMigrate ?? 0}
    set {_uniqueStorage()._countDisconnectsToMigrate = newValue}
  }
  /// Returns true if `countDisconnectsToMigrate` has been explicitly set.
  var hasCountDisconnectsToMigrate: Bool {return _storage._countDisconnectsToMigrate != nil}
  /// Clears the value of `countDisconnectsToMigrate`. Subsequent reads from it will return its default value.
  mutating func clearCountDisconnectsToMigrate() {_uniqueStorage()._countDisconnectsToMigrate = nil}

  var ogsDataReportTimeWindow: Int32 {
    get {return _storage._ogsDataReportTimeWindow ?? 0}
    set {_uniqueStorage()._ogsDataReportTimeWindow = newValue}
  }
  /// Returns true if `ogsDataReportTimeWindow` has been explicitly set.
  var hasOgsDataReportTimeWindow: Bool {return _storage._ogsDataReportTimeWindow != nil}
  /// Clears the value of `ogsDataReportTimeWindow`. Subsequent reads from it will return its default value.
  mutating func clearOgsDataReportTimeWindow() {_uniqueStorage()._ogsDataReportTimeWindow = nil}

  var clientInstanceID: UInt64 {
    get {return _storage._clientInstanceID ?? 0}
    set {_uniqueStorage()._clientInstanceID = newValue}
  }
  /// Returns true if `clientInstanceID` has been explicitly set.
  var hasClientInstanceID: Bool {return _storage._clientInstanceID != nil}
  /// Clears the value of `clientInstanceID`. Subsequent reads from it will return its default value.
  mutating func clearClientInstanceID() {_uniqueStorage()._clientInstanceID = nil}

  var forceClientUpdateCheck: Bool {
    get {return _storage._forceClientUpdateCheck ?? false}
    set {_uniqueStorage()._forceClientUpdateCheck = newValue}
  }
  /// Returns true if `forceClientUpdateCheck` has been explicitly set.
  var hasForceClientUpdateCheck: Bool {return _storage._forceClientUpdateCheck != nil}
  /// Clears the value of `forceClientUpdateCheck`. Subsequent reads from it will return its default value.
  mutating func clearForceClientUpdateCheck() {_uniqueStorage()._forceClientUpdateCheck = nil}

  var agreementSessionURL: String {
    get {return _storage._agreementSessionURL ?? String()}
    set {_uniqueStorage()._agreementSessionURL = newValue}
  }
  /// Returns true if `agreementSessionURL` has been explicitly set.
  var hasAgreementSessionURL: Bool {return _storage._agreementSessionURL != nil}
  /// Clears the value of `agreementSessionURL`. Subsequent reads from it will return its default value.
  mutating func clearAgreementSessionURL() {_uniqueStorage()._agreementSessionURL = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct CMsgClientRequestWebAPIAuthenticateUserNonce {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var tokenType: Int32 {
    get {return _tokenType ?? -1}
    set {_tokenType = newValue}
  }
  /// Returns true if `tokenType` has been explicitly set.
  var hasTokenType: Bool {return self._tokenType != nil}
  /// Clears the value of `tokenType`. Subsequent reads from it will return its default value.
  mutating func clearTokenType() {self._tokenType = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _tokenType: Int32? = nil
}

struct CMsgClientRequestWebAPIAuthenticateUserNonceResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var eresult: Int32 {
    get {return _eresult ?? 2}
    set {_eresult = newValue}
  }
  /// Returns true if `eresult` has been explicitly set.
  var hasEresult: Bool {return self._eresult != nil}
  /// Clears the value of `eresult`. Subsequent reads from it will return its default value.
  mutating func clearEresult() {self._eresult = nil}

  var webapiAuthenticateUserNonce: String {
    get {return _webapiAuthenticateUserNonce ?? String()}
    set {_webapiAuthenticateUserNonce = newValue}
  }
  /// Returns true if `webapiAuthenticateUserNonce` has been explicitly set.
  var hasWebapiAuthenticateUserNonce: Bool {return self._webapiAuthenticateUserNonce != nil}
  /// Clears the value of `webapiAuthenticateUserNonce`. Subsequent reads from it will return its default value.
  mutating func clearWebapiAuthenticateUserNonce() {self._webapiAuthenticateUserNonce = nil}

  var tokenType: Int32 {
    get {return _tokenType ?? -1}
    set {_tokenType = newValue}
  }
  /// Returns true if `tokenType` has been explicitly set.
  var hasTokenType: Bool {return self._tokenType != nil}
  /// Clears the value of `tokenType`. Subsequent reads from it will return its default value.
  mutating func clearTokenType() {self._tokenType = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _eresult: Int32? = nil
  fileprivate var _webapiAuthenticateUserNonce: String? = nil
  fileprivate var _tokenType: Int32? = nil
}

struct CMsgClientLogOff {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct CMsgClientLoggedOff {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var eresult: Int32 {
    get {return _eresult ?? 2}
    set {_eresult = newValue}
  }
  /// Returns true if `eresult` has been explicitly set.
  var hasEresult: Bool {return self._eresult != nil}
  /// Clears the value of `eresult`. Subsequent reads from it will return its default value.
  mutating func clearEresult() {self._eresult = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _eresult: Int32? = nil
}

struct CMsgClientNewLoginKey {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var uniqueID: UInt32 {
    get {return _uniqueID ?? 0}
    set {_uniqueID = newValue}
  }
  /// Returns true if `uniqueID` has been explicitly set.
  var hasUniqueID: Bool {return self._uniqueID != nil}
  /// Clears the value of `uniqueID`. Subsequent reads from it will return its default value.
  mutating func clearUniqueID() {self._uniqueID = nil}

  var loginKey: String {
    get {return _loginKey ?? String()}
    set {_loginKey = newValue}
  }
  /// Returns true if `loginKey` has been explicitly set.
  var hasLoginKey: Bool {return self._loginKey != nil}
  /// Clears the value of `loginKey`. Subsequent reads from it will return its default value.
  mutating func clearLoginKey() {self._loginKey = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _uniqueID: UInt32? = nil
  fileprivate var _loginKey: String? = nil
}

struct CMsgClientNewLoginKeyAccepted {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var uniqueID: UInt32 {
    get {return _uniqueID ?? 0}
    set {_uniqueID = newValue}
  }
  /// Returns true if `uniqueID` has been explicitly set.
  var hasUniqueID: Bool {return self._uniqueID != nil}
  /// Clears the value of `uniqueID`. Subsequent reads from it will return its default value.
  mutating func clearUniqueID() {self._uniqueID = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _uniqueID: UInt32? = nil
}

struct CMsgClientAccountInfo {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var personaName: String {
    get {return _personaName ?? String()}
    set {_personaName = newValue}
  }
  /// Returns true if `personaName` has been explicitly set.
  var hasPersonaName: Bool {return self._personaName != nil}
  /// Clears the value of `personaName`. Subsequent reads from it will return its default value.
  mutating func clearPersonaName() {self._personaName = nil}

  var ipCountry: String {
    get {return _ipCountry ?? String()}
    set {_ipCountry = newValue}
  }
  /// Returns true if `ipCountry` has been explicitly set.
  var hasIpCountry: Bool {return self._ipCountry != nil}
  /// Clears the value of `ipCountry`. Subsequent reads from it will return its default value.
  mutating func clearIpCountry() {self._ipCountry = nil}

  var countAuthedComputers: Int32 {
    get {return _countAuthedComputers ?? 0}
    set {_countAuthedComputers = newValue}
  }
  /// Returns true if `countAuthedComputers` has been explicitly set.
  var hasCountAuthedComputers: Bool {return self._countAuthedComputers != nil}
  /// Clears the value of `countAuthedComputers`. Subsequent reads from it will return its default value.
  mutating func clearCountAuthedComputers() {self._countAuthedComputers = nil}

  var accountFlags: UInt32 {
    get {return _accountFlags ?? 0}
    set {_accountFlags = newValue}
  }
  /// Returns true if `accountFlags` has been explicitly set.
  var hasAccountFlags: Bool {return self._accountFlags != nil}
  /// Clears the value of `accountFlags`. Subsequent reads from it will return its default value.
  mutating func clearAccountFlags() {self._accountFlags = nil}

  var facebookID: UInt64 {
    get {return _facebookID ?? 0}
    set {_facebookID = newValue}
  }
  /// Returns true if `facebookID` has been explicitly set.
  var hasFacebookID: Bool {return self._facebookID != nil}
  /// Clears the value of `facebookID`. Subsequent reads from it will return its default value.
  mutating func clearFacebookID() {self._facebookID = nil}

  var facebookName: String {
    get {return _facebookName ?? String()}
    set {_facebookName = newValue}
  }
  /// Returns true if `facebookName` has been explicitly set.
  var hasFacebookName: Bool {return self._facebookName != nil}
  /// Clears the value of `facebookName`. Subsequent reads from it will return its default value.
  mutating func clearFacebookName() {self._facebookName = nil}

  var steamguardNotifyNewmachines: Bool {
    get {return _steamguardNotifyNewmachines ?? false}
    set {_steamguardNotifyNewmachines = newValue}
  }
  /// Returns true if `steamguardNotifyNewmachines` has been explicitly set.
  var hasSteamguardNotifyNewmachines: Bool {return self._steamguardNotifyNewmachines != nil}
  /// Clears the value of `steamguardNotifyNewmachines`. Subsequent reads from it will return its default value.
  mutating func clearSteamguardNotifyNewmachines() {self._steamguardNotifyNewmachines = nil}

  var steamguardMachineNameUserChosen: String {
    get {return _steamguardMachineNameUserChosen ?? String()}
    set {_steamguardMachineNameUserChosen = newValue}
  }
  /// Returns true if `steamguardMachineNameUserChosen` has been explicitly set.
  var hasSteamguardMachineNameUserChosen: Bool {return self._steamguardMachineNameUserChosen != nil}
  /// Clears the value of `steamguardMachineNameUserChosen`. Subsequent reads from it will return its default value.
  mutating func clearSteamguardMachineNameUserChosen() {self._steamguardMachineNameUserChosen = nil}

  var isPhoneVerified: Bool {
    get {return _isPhoneVerified ?? false}
    set {_isPhoneVerified = newValue}
  }
  /// Returns true if `isPhoneVerified` has been explicitly set.
  var hasIsPhoneVerified: Bool {return self._isPhoneVerified != nil}
  /// Clears the value of `isPhoneVerified`. Subsequent reads from it will return its default value.
  mutating func clearIsPhoneVerified() {self._isPhoneVerified = nil}

  var twoFactorState: UInt32 {
    get {return _twoFactorState ?? 0}
    set {_twoFactorState = newValue}
  }
  /// Returns true if `twoFactorState` has been explicitly set.
  var hasTwoFactorState: Bool {return self._twoFactorState != nil}
  /// Clears the value of `twoFactorState`. Subsequent reads from it will return its default value.
  mutating func clearTwoFactorState() {self._twoFactorState = nil}

  var isPhoneIdentifying: Bool {
    get {return _isPhoneIdentifying ?? false}
    set {_isPhoneIdentifying = newValue}
  }
  /// Returns true if `isPhoneIdentifying` has been explicitly set.
  var hasIsPhoneIdentifying: Bool {return self._isPhoneIdentifying != nil}
  /// Clears the value of `isPhoneIdentifying`. Subsequent reads from it will return its default value.
  mutating func clearIsPhoneIdentifying() {self._isPhoneIdentifying = nil}

  var isPhoneNeedingReverify: Bool {
    get {return _isPhoneNeedingReverify ?? false}
    set {_isPhoneNeedingReverify = newValue}
  }
  /// Returns true if `isPhoneNeedingReverify` has been explicitly set.
  var hasIsPhoneNeedingReverify: Bool {return self._isPhoneNeedingReverify != nil}
  /// Clears the value of `isPhoneNeedingReverify`. Subsequent reads from it will return its default value.
  mutating func clearIsPhoneNeedingReverify() {self._isPhoneNeedingReverify = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _personaName: String? = nil
  fileprivate var _ipCountry: String? = nil
  fileprivate var _countAuthedComputers: Int32? = nil
  fileprivate var _accountFlags: UInt32? = nil
  fileprivate var _facebookID: UInt64? = nil
  fileprivate var _facebookName: String? = nil
  fileprivate var _steamguardNotifyNewmachines: Bool? = nil
  fileprivate var _steamguardMachineNameUserChosen: String? = nil
  fileprivate var _isPhoneVerified: Bool? = nil
  fileprivate var _twoFactorState: UInt32? = nil
  fileprivate var _isPhoneIdentifying: Bool? = nil
  fileprivate var _isPhoneNeedingReverify: Bool? = nil
}

struct CMsgClientChallengeRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var steamid: UInt64 {
    get {return _steamid ?? 0}
    set {_steamid = newValue}
  }
  /// Returns true if `steamid` has been explicitly set.
  var hasSteamid: Bool {return self._steamid != nil}
  /// Clears the value of `steamid`. Subsequent reads from it will return its default value.
  mutating func clearSteamid() {self._steamid = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _steamid: UInt64? = nil
}

struct CMsgClientChallengeResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var challenge: UInt64 {
    get {return _challenge ?? 0}
    set {_challenge = newValue}
  }
  /// Returns true if `challenge` has been explicitly set.
  var hasChallenge: Bool {return self._challenge != nil}
  /// Clears the value of `challenge`. Subsequent reads from it will return its default value.
  mutating func clearChallenge() {self._challenge = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _challenge: UInt64? = nil
}

#if swift(>=5.5) && canImport(_Concurrency)
extension CMsgClientHeartBeat: @unchecked Sendable {}
extension CMsgClientServerTimestampRequest: @unchecked Sendable {}
extension CMsgClientServerTimestampResponse: @unchecked Sendable {}
extension CMsgClientSecret: @unchecked Sendable {}
extension CMsgClientLogon: @unchecked Sendable {}
extension CMsgClientLogonResponse: @unchecked Sendable {}
extension CMsgClientRequestWebAPIAuthenticateUserNonce: @unchecked Sendable {}
extension CMsgClientRequestWebAPIAuthenticateUserNonceResponse: @unchecked Sendable {}
extension CMsgClientLogOff: @unchecked Sendable {}
extension CMsgClientLoggedOff: @unchecked Sendable {}
extension CMsgClientNewLoginKey: @unchecked Sendable {}
extension CMsgClientNewLoginKeyAccepted: @unchecked Sendable {}
extension CMsgClientAccountInfo: @unchecked Sendable {}
extension CMsgClientChallengeRequest: @unchecked Sendable {}
extension CMsgClientChallengeResponse: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension CMsgClientHeartBeat: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "CMsgClientHeartBeat"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "send_reply"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBoolField(value: &self._sendReply) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._sendReply {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: CMsgClientHeartBeat, rhs: CMsgClientHeartBeat) -> Bool {
    if lhs._sendReply != rhs._sendReply {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension CMsgClientServerTimestampRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "CMsgClientServerTimestampRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "client_request_timestamp"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt64Field(value: &self._clientRequestTimestamp) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._clientRequestTimestamp {
      try visitor.visitSingularUInt64Field(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: CMsgClientServerTimestampRequest, rhs: CMsgClientServerTimestampRequest) -> Bool {
    if lhs._clientRequestTimestamp != rhs._clientRequestTimestamp {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension CMsgClientServerTimestampResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "CMsgClientServerTimestampResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "client_request_timestamp"),
    2: .standard(proto: "server_timestamp_ms"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt64Field(value: &self._clientRequestTimestamp) }()
      case 2: try { try decoder.decodeSingularUInt64Field(value: &self._serverTimestampMs) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._clientRequestTimestamp {
      try visitor.visitSingularUInt64Field(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._serverTimestampMs {
      try visitor.visitSingularUInt64Field(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: CMsgClientServerTimestampResponse, rhs: CMsgClientServerTimestampResponse) -> Bool {
    if lhs._clientRequestTimestamp != rhs._clientRequestTimestamp {return false}
    if lhs._serverTimestampMs != rhs._serverTimestampMs {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension CMsgClientSecret: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "CMsgClientSecret"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "version"),
    2: .same(proto: "appid"),
    3: .same(proto: "deviceid"),
    4: .same(proto: "nonce"),
    5: .same(proto: "hmac"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt32Field(value: &self._version) }()
      case 2: try { try decoder.decodeSingularUInt32Field(value: &self._appid) }()
      case 3: try { try decoder.decodeSingularUInt32Field(value: &self._deviceid) }()
      case 4: try { try decoder.decodeSingularFixed64Field(value: &self._nonce) }()
      case 5: try { try decoder.decodeSingularBytesField(value: &self._hmac) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._version {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._appid {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._deviceid {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 3)
    } }()
    try { if let v = self._nonce {
      try visitor.visitSingularFixed64Field(value: v, fieldNumber: 4)
    } }()
    try { if let v = self._hmac {
      try visitor.visitSingularBytesField(value: v, fieldNumber: 5)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: CMsgClientSecret, rhs: CMsgClientSecret) -> Bool {
    if lhs._version != rhs._version {return false}
    if lhs._appid != rhs._appid {return false}
    if lhs._deviceid != rhs._deviceid {return false}
    if lhs._nonce != rhs._nonce {return false}
    if lhs._hmac != rhs._hmac {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension CMsgClientLogon: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "CMsgClientLogon"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "protocol_version"),
    2: .standard(proto: "deprecated_obfustucated_private_ip"),
    3: .standard(proto: "cell_id"),
    4: .standard(proto: "last_session_id"),
    5: .standard(proto: "client_package_version"),
    6: .standard(proto: "client_language"),
    7: .standard(proto: "client_os_type"),
    8: .standard(proto: "should_remember_password"),
    9: .standard(proto: "wine_version"),
    10: .standard(proto: "deprecated_10"),
    11: .standard(proto: "obfuscated_private_ip"),
    20: .standard(proto: "deprecated_public_ip"),
    21: .standard(proto: "qos_level"),
    22: .standard(proto: "client_supplied_steam_id"),
    23: .standard(proto: "public_ip"),
    30: .standard(proto: "machine_id"),
    31: .standard(proto: "launcher_type"),
    32: .standard(proto: "ui_mode"),
    33: .standard(proto: "chat_mode"),
    41: .standard(proto: "steam2_auth_ticket"),
    42: .standard(proto: "email_address"),
    43: .standard(proto: "rtime32_account_creation"),
    50: .standard(proto: "account_name"),
    51: .same(proto: "password"),
    52: .standard(proto: "game_server_token"),
    60: .standard(proto: "login_key"),
    70: .standard(proto: "was_converted_deprecated_msg"),
    80: .standard(proto: "anon_user_target_account_name"),
    81: .standard(proto: "resolved_user_steam_id"),
    82: .standard(proto: "eresult_sentryfile"),
    83: .standard(proto: "sha_sentryfile"),
    84: .standard(proto: "auth_code"),
    85: .standard(proto: "otp_type"),
    86: .standard(proto: "otp_value"),
    87: .standard(proto: "otp_identifier"),
    88: .standard(proto: "steam2_ticket_request"),
    90: .standard(proto: "sony_psn_ticket"),
    91: .standard(proto: "sony_psn_service_id"),
    92: .standard(proto: "create_new_psn_linked_account_if_needed"),
    93: .standard(proto: "sony_psn_name"),
    94: .standard(proto: "game_server_app_id"),
    95: .standard(proto: "steamguard_dont_remember_computer"),
    96: .standard(proto: "machine_name"),
    97: .standard(proto: "machine_name_userchosen"),
    98: .standard(proto: "country_override"),
    99: .standard(proto: "is_steam_box"),
    100: .standard(proto: "client_instance_id"),
    101: .standard(proto: "two_factor_code"),
    102: .standard(proto: "supports_rate_limit_response"),
    103: .standard(proto: "web_logon_nonce"),
    104: .standard(proto: "priority_reason"),
    105: .standard(proto: "embedded_client_secret"),
    106: .standard(proto: "disable_partner_autogrants"),
  ]

  fileprivate class _StorageClass {
    var _protocolVersion: UInt32? = nil
    var _deprecatedObfustucatedPrivateIp: UInt32? = nil
    var _cellID: UInt32? = nil
    var _lastSessionID: UInt32? = nil
    var _clientPackageVersion: UInt32? = nil
    var _clientLanguage: String? = nil
    var _clientOsType: UInt32? = nil
    var _shouldRememberPassword: Bool? = nil
    var _wineVersion: String? = nil
    var _deprecated10: UInt32? = nil
    var _obfuscatedPrivateIp: CMsgIPAddress? = nil
    var _deprecatedPublicIp: UInt32? = nil
    var _qosLevel: UInt32? = nil
    var _clientSuppliedSteamID: UInt64? = nil
    var _publicIp: CMsgIPAddress? = nil
    var _machineID: Data? = nil
    var _launcherType: UInt32? = nil
    var _uiMode: UInt32? = nil
    var _chatMode: UInt32? = nil
    var _steam2AuthTicket: Data? = nil
    var _emailAddress: String? = nil
    var _rtime32AccountCreation: UInt32? = nil
    var _accountName: String? = nil
    var _password: String? = nil
    var _gameServerToken: String? = nil
    var _loginKey: String? = nil
    var _wasConvertedDeprecatedMsg: Bool? = nil
    var _anonUserTargetAccountName: String? = nil
    var _resolvedUserSteamID: UInt64? = nil
    var _eresultSentryfile: Int32? = nil
    var _shaSentryfile: Data? = nil
    var _authCode: String? = nil
    var _otpType: Int32? = nil
    var _otpValue: UInt32? = nil
    var _otpIdentifier: String? = nil
    var _steam2TicketRequest: Bool? = nil
    var _sonyPsnTicket: Data? = nil
    var _sonyPsnServiceID: String? = nil
    var _createNewPsnLinkedAccountIfNeeded: Bool? = nil
    var _sonyPsnName: String? = nil
    var _gameServerAppID: Int32? = nil
    var _steamguardDontRememberComputer: Bool? = nil
    var _machineName: String? = nil
    var _machineNameUserchosen: String? = nil
    var _countryOverride: String? = nil
    var _isSteamBox: Bool? = nil
    var _clientInstanceID: UInt64? = nil
    var _twoFactorCode: String? = nil
    var _supportsRateLimitResponse: Bool? = nil
    var _webLogonNonce: String? = nil
    var _priorityReason: Int32? = nil
    var _embeddedClientSecret: CMsgClientSecret? = nil
    var _disablePartnerAutogrants: Bool? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _protocolVersion = source._protocolVersion
      _deprecatedObfustucatedPrivateIp = source._deprecatedObfustucatedPrivateIp
      _cellID = source._cellID
      _lastSessionID = source._lastSessionID
      _clientPackageVersion = source._clientPackageVersion
      _clientLanguage = source._clientLanguage
      _clientOsType = source._clientOsType
      _shouldRememberPassword = source._shouldRememberPassword
      _wineVersion = source._wineVersion
      _deprecated10 = source._deprecated10
      _obfuscatedPrivateIp = source._obfuscatedPrivateIp
      _deprecatedPublicIp = source._deprecatedPublicIp
      _qosLevel = source._qosLevel
      _clientSuppliedSteamID = source._clientSuppliedSteamID
      _publicIp = source._publicIp
      _machineID = source._machineID
      _launcherType = source._launcherType
      _uiMode = source._uiMode
      _chatMode = source._chatMode
      _steam2AuthTicket = source._steam2AuthTicket
      _emailAddress = source._emailAddress
      _rtime32AccountCreation = source._rtime32AccountCreation
      _accountName = source._accountName
      _password = source._password
      _gameServerToken = source._gameServerToken
      _loginKey = source._loginKey
      _wasConvertedDeprecatedMsg = source._wasConvertedDeprecatedMsg
      _anonUserTargetAccountName = source._anonUserTargetAccountName
      _resolvedUserSteamID = source._resolvedUserSteamID
      _eresultSentryfile = source._eresultSentryfile
      _shaSentryfile = source._shaSentryfile
      _authCode = source._authCode
      _otpType = source._otpType
      _otpValue = source._otpValue
      _otpIdentifier = source._otpIdentifier
      _steam2TicketRequest = source._steam2TicketRequest
      _sonyPsnTicket = source._sonyPsnTicket
      _sonyPsnServiceID = source._sonyPsnServiceID
      _createNewPsnLinkedAccountIfNeeded = source._createNewPsnLinkedAccountIfNeeded
      _sonyPsnName = source._sonyPsnName
      _gameServerAppID = source._gameServerAppID
      _steamguardDontRememberComputer = source._steamguardDontRememberComputer
      _machineName = source._machineName
      _machineNameUserchosen = source._machineNameUserchosen
      _countryOverride = source._countryOverride
      _isSteamBox = source._isSteamBox
      _clientInstanceID = source._clientInstanceID
      _twoFactorCode = source._twoFactorCode
      _supportsRateLimitResponse = source._supportsRateLimitResponse
      _webLogonNonce = source._webLogonNonce
      _priorityReason = source._priorityReason
      _embeddedClientSecret = source._embeddedClientSecret
      _disablePartnerAutogrants = source._disablePartnerAutogrants
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularUInt32Field(value: &_storage._protocolVersion) }()
        case 2: try { try decoder.decodeSingularUInt32Field(value: &_storage._deprecatedObfustucatedPrivateIp) }()
        case 3: try { try decoder.decodeSingularUInt32Field(value: &_storage._cellID) }()
        case 4: try { try decoder.decodeSingularUInt32Field(value: &_storage._lastSessionID) }()
        case 5: try { try decoder.decodeSingularUInt32Field(value: &_storage._clientPackageVersion) }()
        case 6: try { try decoder.decodeSingularStringField(value: &_storage._clientLanguage) }()
        case 7: try { try decoder.decodeSingularUInt32Field(value: &_storage._clientOsType) }()
        case 8: try { try decoder.decodeSingularBoolField(value: &_storage._shouldRememberPassword) }()
        case 9: try { try decoder.decodeSingularStringField(value: &_storage._wineVersion) }()
        case 10: try { try decoder.decodeSingularUInt32Field(value: &_storage._deprecated10) }()
        case 11: try { try decoder.decodeSingularMessageField(value: &_storage._obfuscatedPrivateIp) }()
        case 20: try { try decoder.decodeSingularUInt32Field(value: &_storage._deprecatedPublicIp) }()
        case 21: try { try decoder.decodeSingularUInt32Field(value: &_storage._qosLevel) }()
        case 22: try { try decoder.decodeSingularFixed64Field(value: &_storage._clientSuppliedSteamID) }()
        case 23: try { try decoder.decodeSingularMessageField(value: &_storage._publicIp) }()
        case 30: try { try decoder.decodeSingularBytesField(value: &_storage._machineID) }()
        case 31: try { try decoder.decodeSingularUInt32Field(value: &_storage._launcherType) }()
        case 32: try { try decoder.decodeSingularUInt32Field(value: &_storage._uiMode) }()
        case 33: try { try decoder.decodeSingularUInt32Field(value: &_storage._chatMode) }()
        case 41: try { try decoder.decodeSingularBytesField(value: &_storage._steam2AuthTicket) }()
        case 42: try { try decoder.decodeSingularStringField(value: &_storage._emailAddress) }()
        case 43: try { try decoder.decodeSingularFixed32Field(value: &_storage._rtime32AccountCreation) }()
        case 50: try { try decoder.decodeSingularStringField(value: &_storage._accountName) }()
        case 51: try { try decoder.decodeSingularStringField(value: &_storage._password) }()
        case 52: try { try decoder.decodeSingularStringField(value: &_storage._gameServerToken) }()
        case 60: try { try decoder.decodeSingularStringField(value: &_storage._loginKey) }()
        case 70: try { try decoder.decodeSingularBoolField(value: &_storage._wasConvertedDeprecatedMsg) }()
        case 80: try { try decoder.decodeSingularStringField(value: &_storage._anonUserTargetAccountName) }()
        case 81: try { try decoder.decodeSingularFixed64Field(value: &_storage._resolvedUserSteamID) }()
        case 82: try { try decoder.decodeSingularInt32Field(value: &_storage._eresultSentryfile) }()
        case 83: try { try decoder.decodeSingularBytesField(value: &_storage._shaSentryfile) }()
        case 84: try { try decoder.decodeSingularStringField(value: &_storage._authCode) }()
        case 85: try { try decoder.decodeSingularInt32Field(value: &_storage._otpType) }()
        case 86: try { try decoder.decodeSingularUInt32Field(value: &_storage._otpValue) }()
        case 87: try { try decoder.decodeSingularStringField(value: &_storage._otpIdentifier) }()
        case 88: try { try decoder.decodeSingularBoolField(value: &_storage._steam2TicketRequest) }()
        case 90: try { try decoder.decodeSingularBytesField(value: &_storage._sonyPsnTicket) }()
        case 91: try { try decoder.decodeSingularStringField(value: &_storage._sonyPsnServiceID) }()
        case 92: try { try decoder.decodeSingularBoolField(value: &_storage._createNewPsnLinkedAccountIfNeeded) }()
        case 93: try { try decoder.decodeSingularStringField(value: &_storage._sonyPsnName) }()
        case 94: try { try decoder.decodeSingularInt32Field(value: &_storage._gameServerAppID) }()
        case 95: try { try decoder.decodeSingularBoolField(value: &_storage._steamguardDontRememberComputer) }()
        case 96: try { try decoder.decodeSingularStringField(value: &_storage._machineName) }()
        case 97: try { try decoder.decodeSingularStringField(value: &_storage._machineNameUserchosen) }()
        case 98: try { try decoder.decodeSingularStringField(value: &_storage._countryOverride) }()
        case 99: try { try decoder.decodeSingularBoolField(value: &_storage._isSteamBox) }()
        case 100: try { try decoder.decodeSingularUInt64Field(value: &_storage._clientInstanceID) }()
        case 101: try { try decoder.decodeSingularStringField(value: &_storage._twoFactorCode) }()
        case 102: try { try decoder.decodeSingularBoolField(value: &_storage._supportsRateLimitResponse) }()
        case 103: try { try decoder.decodeSingularStringField(value: &_storage._webLogonNonce) }()
        case 104: try { try decoder.decodeSingularInt32Field(value: &_storage._priorityReason) }()
        case 105: try { try decoder.decodeSingularMessageField(value: &_storage._embeddedClientSecret) }()
        case 106: try { try decoder.decodeSingularBoolField(value: &_storage._disablePartnerAutogrants) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      try { if let v = _storage._protocolVersion {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 1)
      } }()
      try { if let v = _storage._deprecatedObfustucatedPrivateIp {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 2)
      } }()
      try { if let v = _storage._cellID {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 3)
      } }()
      try { if let v = _storage._lastSessionID {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 4)
      } }()
      try { if let v = _storage._clientPackageVersion {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 5)
      } }()
      try { if let v = _storage._clientLanguage {
        try visitor.visitSingularStringField(value: v, fieldNumber: 6)
      } }()
      try { if let v = _storage._clientOsType {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 7)
      } }()
      try { if let v = _storage._shouldRememberPassword {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 8)
      } }()
      try { if let v = _storage._wineVersion {
        try visitor.visitSingularStringField(value: v, fieldNumber: 9)
      } }()
      try { if let v = _storage._deprecated10 {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 10)
      } }()
      try { if let v = _storage._obfuscatedPrivateIp {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
      } }()
      try { if let v = _storage._deprecatedPublicIp {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 20)
      } }()
      try { if let v = _storage._qosLevel {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 21)
      } }()
      try { if let v = _storage._clientSuppliedSteamID {
        try visitor.visitSingularFixed64Field(value: v, fieldNumber: 22)
      } }()
      try { if let v = _storage._publicIp {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 23)
      } }()
      try { if let v = _storage._machineID {
        try visitor.visitSingularBytesField(value: v, fieldNumber: 30)
      } }()
      try { if let v = _storage._launcherType {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 31)
      } }()
      try { if let v = _storage._uiMode {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 32)
      } }()
      try { if let v = _storage._chatMode {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 33)
      } }()
      try { if let v = _storage._steam2AuthTicket {
        try visitor.visitSingularBytesField(value: v, fieldNumber: 41)
      } }()
      try { if let v = _storage._emailAddress {
        try visitor.visitSingularStringField(value: v, fieldNumber: 42)
      } }()
      try { if let v = _storage._rtime32AccountCreation {
        try visitor.visitSingularFixed32Field(value: v, fieldNumber: 43)
      } }()
      try { if let v = _storage._accountName {
        try visitor.visitSingularStringField(value: v, fieldNumber: 50)
      } }()
      try { if let v = _storage._password {
        try visitor.visitSingularStringField(value: v, fieldNumber: 51)
      } }()
      try { if let v = _storage._gameServerToken {
        try visitor.visitSingularStringField(value: v, fieldNumber: 52)
      } }()
      try { if let v = _storage._loginKey {
        try visitor.visitSingularStringField(value: v, fieldNumber: 60)
      } }()
      try { if let v = _storage._wasConvertedDeprecatedMsg {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 70)
      } }()
      try { if let v = _storage._anonUserTargetAccountName {
        try visitor.visitSingularStringField(value: v, fieldNumber: 80)
      } }()
      try { if let v = _storage._resolvedUserSteamID {
        try visitor.visitSingularFixed64Field(value: v, fieldNumber: 81)
      } }()
      try { if let v = _storage._eresultSentryfile {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 82)
      } }()
      try { if let v = _storage._shaSentryfile {
        try visitor.visitSingularBytesField(value: v, fieldNumber: 83)
      } }()
      try { if let v = _storage._authCode {
        try visitor.visitSingularStringField(value: v, fieldNumber: 84)
      } }()
      try { if let v = _storage._otpType {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 85)
      } }()
      try { if let v = _storage._otpValue {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 86)
      } }()
      try { if let v = _storage._otpIdentifier {
        try visitor.visitSingularStringField(value: v, fieldNumber: 87)
      } }()
      try { if let v = _storage._steam2TicketRequest {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 88)
      } }()
      try { if let v = _storage._sonyPsnTicket {
        try visitor.visitSingularBytesField(value: v, fieldNumber: 90)
      } }()
      try { if let v = _storage._sonyPsnServiceID {
        try visitor.visitSingularStringField(value: v, fieldNumber: 91)
      } }()
      try { if let v = _storage._createNewPsnLinkedAccountIfNeeded {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 92)
      } }()
      try { if let v = _storage._sonyPsnName {
        try visitor.visitSingularStringField(value: v, fieldNumber: 93)
      } }()
      try { if let v = _storage._gameServerAppID {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 94)
      } }()
      try { if let v = _storage._steamguardDontRememberComputer {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 95)
      } }()
      try { if let v = _storage._machineName {
        try visitor.visitSingularStringField(value: v, fieldNumber: 96)
      } }()
      try { if let v = _storage._machineNameUserchosen {
        try visitor.visitSingularStringField(value: v, fieldNumber: 97)
      } }()
      try { if let v = _storage._countryOverride {
        try visitor.visitSingularStringField(value: v, fieldNumber: 98)
      } }()
      try { if let v = _storage._isSteamBox {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 99)
      } }()
      try { if let v = _storage._clientInstanceID {
        try visitor.visitSingularUInt64Field(value: v, fieldNumber: 100)
      } }()
      try { if let v = _storage._twoFactorCode {
        try visitor.visitSingularStringField(value: v, fieldNumber: 101)
      } }()
      try { if let v = _storage._supportsRateLimitResponse {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 102)
      } }()
      try { if let v = _storage._webLogonNonce {
        try visitor.visitSingularStringField(value: v, fieldNumber: 103)
      } }()
      try { if let v = _storage._priorityReason {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 104)
      } }()
      try { if let v = _storage._embeddedClientSecret {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 105)
      } }()
      try { if let v = _storage._disablePartnerAutogrants {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 106)
      } }()
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: CMsgClientLogon, rhs: CMsgClientLogon) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._protocolVersion != rhs_storage._protocolVersion {return false}
        if _storage._deprecatedObfustucatedPrivateIp != rhs_storage._deprecatedObfustucatedPrivateIp {return false}
        if _storage._cellID != rhs_storage._cellID {return false}
        if _storage._lastSessionID != rhs_storage._lastSessionID {return false}
        if _storage._clientPackageVersion != rhs_storage._clientPackageVersion {return false}
        if _storage._clientLanguage != rhs_storage._clientLanguage {return false}
        if _storage._clientOsType != rhs_storage._clientOsType {return false}
        if _storage._shouldRememberPassword != rhs_storage._shouldRememberPassword {return false}
        if _storage._wineVersion != rhs_storage._wineVersion {return false}
        if _storage._deprecated10 != rhs_storage._deprecated10 {return false}
        if _storage._obfuscatedPrivateIp != rhs_storage._obfuscatedPrivateIp {return false}
        if _storage._deprecatedPublicIp != rhs_storage._deprecatedPublicIp {return false}
        if _storage._qosLevel != rhs_storage._qosLevel {return false}
        if _storage._clientSuppliedSteamID != rhs_storage._clientSuppliedSteamID {return false}
        if _storage._publicIp != rhs_storage._publicIp {return false}
        if _storage._machineID != rhs_storage._machineID {return false}
        if _storage._launcherType != rhs_storage._launcherType {return false}
        if _storage._uiMode != rhs_storage._uiMode {return false}
        if _storage._chatMode != rhs_storage._chatMode {return false}
        if _storage._steam2AuthTicket != rhs_storage._steam2AuthTicket {return false}
        if _storage._emailAddress != rhs_storage._emailAddress {return false}
        if _storage._rtime32AccountCreation != rhs_storage._rtime32AccountCreation {return false}
        if _storage._accountName != rhs_storage._accountName {return false}
        if _storage._password != rhs_storage._password {return false}
        if _storage._gameServerToken != rhs_storage._gameServerToken {return false}
        if _storage._loginKey != rhs_storage._loginKey {return false}
        if _storage._wasConvertedDeprecatedMsg != rhs_storage._wasConvertedDeprecatedMsg {return false}
        if _storage._anonUserTargetAccountName != rhs_storage._anonUserTargetAccountName {return false}
        if _storage._resolvedUserSteamID != rhs_storage._resolvedUserSteamID {return false}
        if _storage._eresultSentryfile != rhs_storage._eresultSentryfile {return false}
        if _storage._shaSentryfile != rhs_storage._shaSentryfile {return false}
        if _storage._authCode != rhs_storage._authCode {return false}
        if _storage._otpType != rhs_storage._otpType {return false}
        if _storage._otpValue != rhs_storage._otpValue {return false}
        if _storage._otpIdentifier != rhs_storage._otpIdentifier {return false}
        if _storage._steam2TicketRequest != rhs_storage._steam2TicketRequest {return false}
        if _storage._sonyPsnTicket != rhs_storage._sonyPsnTicket {return false}
        if _storage._sonyPsnServiceID != rhs_storage._sonyPsnServiceID {return false}
        if _storage._createNewPsnLinkedAccountIfNeeded != rhs_storage._createNewPsnLinkedAccountIfNeeded {return false}
        if _storage._sonyPsnName != rhs_storage._sonyPsnName {return false}
        if _storage._gameServerAppID != rhs_storage._gameServerAppID {return false}
        if _storage._steamguardDontRememberComputer != rhs_storage._steamguardDontRememberComputer {return false}
        if _storage._machineName != rhs_storage._machineName {return false}
        if _storage._machineNameUserchosen != rhs_storage._machineNameUserchosen {return false}
        if _storage._countryOverride != rhs_storage._countryOverride {return false}
        if _storage._isSteamBox != rhs_storage._isSteamBox {return false}
        if _storage._clientInstanceID != rhs_storage._clientInstanceID {return false}
        if _storage._twoFactorCode != rhs_storage._twoFactorCode {return false}
        if _storage._supportsRateLimitResponse != rhs_storage._supportsRateLimitResponse {return false}
        if _storage._webLogonNonce != rhs_storage._webLogonNonce {return false}
        if _storage._priorityReason != rhs_storage._priorityReason {return false}
        if _storage._embeddedClientSecret != rhs_storage._embeddedClientSecret {return false}
        if _storage._disablePartnerAutogrants != rhs_storage._disablePartnerAutogrants {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension CMsgClientLogonResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "CMsgClientLogonResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "eresult"),
    2: .standard(proto: "out_of_game_heartbeat_seconds"),
    3: .standard(proto: "in_game_heartbeat_seconds"),
    4: .standard(proto: "deprecated_public_ip"),
    5: .standard(proto: "rtime32_server_time"),
    6: .standard(proto: "account_flags"),
    7: .standard(proto: "cell_id"),
    8: .standard(proto: "email_domain"),
    9: .standard(proto: "steam2_ticket"),
    10: .standard(proto: "eresult_extended"),
    11: .standard(proto: "webapi_authenticate_user_nonce"),
    12: .standard(proto: "cell_id_ping_threshold"),
    13: .standard(proto: "deprecated_use_pics"),
    14: .standard(proto: "vanity_url"),
    15: .standard(proto: "public_ip"),
    20: .standard(proto: "client_supplied_steamid"),
    21: .standard(proto: "ip_country_code"),
    22: .standard(proto: "parental_settings"),
    23: .standard(proto: "parental_setting_signature"),
    24: .standard(proto: "count_loginfailures_to_migrate"),
    25: .standard(proto: "count_disconnects_to_migrate"),
    26: .standard(proto: "ogs_data_report_time_window"),
    27: .standard(proto: "client_instance_id"),
    28: .standard(proto: "force_client_update_check"),
    29: .standard(proto: "agreement_session_url"),
  ]

  fileprivate class _StorageClass {
    var _eresult: Int32? = nil
    var _outOfGameHeartbeatSeconds: Int32? = nil
    var _inGameHeartbeatSeconds: Int32? = nil
    var _deprecatedPublicIp: UInt32? = nil
    var _rtime32ServerTime: UInt32? = nil
    var _accountFlags: UInt32? = nil
    var _cellID: UInt32? = nil
    var _emailDomain: String? = nil
    var _steam2Ticket: Data? = nil
    var _eresultExtended: Int32? = nil
    var _webapiAuthenticateUserNonce: String? = nil
    var _cellIDPingThreshold: UInt32? = nil
    var _deprecatedUsePics: Bool? = nil
    var _vanityURL: String? = nil
    var _publicIp: CMsgIPAddress? = nil
    var _clientSuppliedSteamid: UInt64? = nil
    var _ipCountryCode: String? = nil
    var _parentalSettings: Data? = nil
    var _parentalSettingSignature: Data? = nil
    var _countLoginfailuresToMigrate: Int32? = nil
    var _countDisconnectsToMigrate: Int32? = nil
    var _ogsDataReportTimeWindow: Int32? = nil
    var _clientInstanceID: UInt64? = nil
    var _forceClientUpdateCheck: Bool? = nil
    var _agreementSessionURL: String? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _eresult = source._eresult
      _outOfGameHeartbeatSeconds = source._outOfGameHeartbeatSeconds
      _inGameHeartbeatSeconds = source._inGameHeartbeatSeconds
      _deprecatedPublicIp = source._deprecatedPublicIp
      _rtime32ServerTime = source._rtime32ServerTime
      _accountFlags = source._accountFlags
      _cellID = source._cellID
      _emailDomain = source._emailDomain
      _steam2Ticket = source._steam2Ticket
      _eresultExtended = source._eresultExtended
      _webapiAuthenticateUserNonce = source._webapiAuthenticateUserNonce
      _cellIDPingThreshold = source._cellIDPingThreshold
      _deprecatedUsePics = source._deprecatedUsePics
      _vanityURL = source._vanityURL
      _publicIp = source._publicIp
      _clientSuppliedSteamid = source._clientSuppliedSteamid
      _ipCountryCode = source._ipCountryCode
      _parentalSettings = source._parentalSettings
      _parentalSettingSignature = source._parentalSettingSignature
      _countLoginfailuresToMigrate = source._countLoginfailuresToMigrate
      _countDisconnectsToMigrate = source._countDisconnectsToMigrate
      _ogsDataReportTimeWindow = source._ogsDataReportTimeWindow
      _clientInstanceID = source._clientInstanceID
      _forceClientUpdateCheck = source._forceClientUpdateCheck
      _agreementSessionURL = source._agreementSessionURL
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularInt32Field(value: &_storage._eresult) }()
        case 2: try { try decoder.decodeSingularInt32Field(value: &_storage._outOfGameHeartbeatSeconds) }()
        case 3: try { try decoder.decodeSingularInt32Field(value: &_storage._inGameHeartbeatSeconds) }()
        case 4: try { try decoder.decodeSingularUInt32Field(value: &_storage._deprecatedPublicIp) }()
        case 5: try { try decoder.decodeSingularFixed32Field(value: &_storage._rtime32ServerTime) }()
        case 6: try { try decoder.decodeSingularUInt32Field(value: &_storage._accountFlags) }()
        case 7: try { try decoder.decodeSingularUInt32Field(value: &_storage._cellID) }()
        case 8: try { try decoder.decodeSingularStringField(value: &_storage._emailDomain) }()
        case 9: try { try decoder.decodeSingularBytesField(value: &_storage._steam2Ticket) }()
        case 10: try { try decoder.decodeSingularInt32Field(value: &_storage._eresultExtended) }()
        case 11: try { try decoder.decodeSingularStringField(value: &_storage._webapiAuthenticateUserNonce) }()
        case 12: try { try decoder.decodeSingularUInt32Field(value: &_storage._cellIDPingThreshold) }()
        case 13: try { try decoder.decodeSingularBoolField(value: &_storage._deprecatedUsePics) }()
        case 14: try { try decoder.decodeSingularStringField(value: &_storage._vanityURL) }()
        case 15: try { try decoder.decodeSingularMessageField(value: &_storage._publicIp) }()
        case 20: try { try decoder.decodeSingularFixed64Field(value: &_storage._clientSuppliedSteamid) }()
        case 21: try { try decoder.decodeSingularStringField(value: &_storage._ipCountryCode) }()
        case 22: try { try decoder.decodeSingularBytesField(value: &_storage._parentalSettings) }()
        case 23: try { try decoder.decodeSingularBytesField(value: &_storage._parentalSettingSignature) }()
        case 24: try { try decoder.decodeSingularInt32Field(value: &_storage._countLoginfailuresToMigrate) }()
        case 25: try { try decoder.decodeSingularInt32Field(value: &_storage._countDisconnectsToMigrate) }()
        case 26: try { try decoder.decodeSingularInt32Field(value: &_storage._ogsDataReportTimeWindow) }()
        case 27: try { try decoder.decodeSingularUInt64Field(value: &_storage._clientInstanceID) }()
        case 28: try { try decoder.decodeSingularBoolField(value: &_storage._forceClientUpdateCheck) }()
        case 29: try { try decoder.decodeSingularStringField(value: &_storage._agreementSessionURL) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      try { if let v = _storage._eresult {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
      } }()
      try { if let v = _storage._outOfGameHeartbeatSeconds {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 2)
      } }()
      try { if let v = _storage._inGameHeartbeatSeconds {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 3)
      } }()
      try { if let v = _storage._deprecatedPublicIp {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 4)
      } }()
      try { if let v = _storage._rtime32ServerTime {
        try visitor.visitSingularFixed32Field(value: v, fieldNumber: 5)
      } }()
      try { if let v = _storage._accountFlags {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 6)
      } }()
      try { if let v = _storage._cellID {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 7)
      } }()
      try { if let v = _storage._emailDomain {
        try visitor.visitSingularStringField(value: v, fieldNumber: 8)
      } }()
      try { if let v = _storage._steam2Ticket {
        try visitor.visitSingularBytesField(value: v, fieldNumber: 9)
      } }()
      try { if let v = _storage._eresultExtended {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 10)
      } }()
      try { if let v = _storage._webapiAuthenticateUserNonce {
        try visitor.visitSingularStringField(value: v, fieldNumber: 11)
      } }()
      try { if let v = _storage._cellIDPingThreshold {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 12)
      } }()
      try { if let v = _storage._deprecatedUsePics {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 13)
      } }()
      try { if let v = _storage._vanityURL {
        try visitor.visitSingularStringField(value: v, fieldNumber: 14)
      } }()
      try { if let v = _storage._publicIp {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 15)
      } }()
      try { if let v = _storage._clientSuppliedSteamid {
        try visitor.visitSingularFixed64Field(value: v, fieldNumber: 20)
      } }()
      try { if let v = _storage._ipCountryCode {
        try visitor.visitSingularStringField(value: v, fieldNumber: 21)
      } }()
      try { if let v = _storage._parentalSettings {
        try visitor.visitSingularBytesField(value: v, fieldNumber: 22)
      } }()
      try { if let v = _storage._parentalSettingSignature {
        try visitor.visitSingularBytesField(value: v, fieldNumber: 23)
      } }()
      try { if let v = _storage._countLoginfailuresToMigrate {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 24)
      } }()
      try { if let v = _storage._countDisconnectsToMigrate {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 25)
      } }()
      try { if let v = _storage._ogsDataReportTimeWindow {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 26)
      } }()
      try { if let v = _storage._clientInstanceID {
        try visitor.visitSingularUInt64Field(value: v, fieldNumber: 27)
      } }()
      try { if let v = _storage._forceClientUpdateCheck {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 28)
      } }()
      try { if let v = _storage._agreementSessionURL {
        try visitor.visitSingularStringField(value: v, fieldNumber: 29)
      } }()
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: CMsgClientLogonResponse, rhs: CMsgClientLogonResponse) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._eresult != rhs_storage._eresult {return false}
        if _storage._outOfGameHeartbeatSeconds != rhs_storage._outOfGameHeartbeatSeconds {return false}
        if _storage._inGameHeartbeatSeconds != rhs_storage._inGameHeartbeatSeconds {return false}
        if _storage._deprecatedPublicIp != rhs_storage._deprecatedPublicIp {return false}
        if _storage._rtime32ServerTime != rhs_storage._rtime32ServerTime {return false}
        if _storage._accountFlags != rhs_storage._accountFlags {return false}
        if _storage._cellID != rhs_storage._cellID {return false}
        if _storage._emailDomain != rhs_storage._emailDomain {return false}
        if _storage._steam2Ticket != rhs_storage._steam2Ticket {return false}
        if _storage._eresultExtended != rhs_storage._eresultExtended {return false}
        if _storage._webapiAuthenticateUserNonce != rhs_storage._webapiAuthenticateUserNonce {return false}
        if _storage._cellIDPingThreshold != rhs_storage._cellIDPingThreshold {return false}
        if _storage._deprecatedUsePics != rhs_storage._deprecatedUsePics {return false}
        if _storage._vanityURL != rhs_storage._vanityURL {return false}
        if _storage._publicIp != rhs_storage._publicIp {return false}
        if _storage._clientSuppliedSteamid != rhs_storage._clientSuppliedSteamid {return false}
        if _storage._ipCountryCode != rhs_storage._ipCountryCode {return false}
        if _storage._parentalSettings != rhs_storage._parentalSettings {return false}
        if _storage._parentalSettingSignature != rhs_storage._parentalSettingSignature {return false}
        if _storage._countLoginfailuresToMigrate != rhs_storage._countLoginfailuresToMigrate {return false}
        if _storage._countDisconnectsToMigrate != rhs_storage._countDisconnectsToMigrate {return false}
        if _storage._ogsDataReportTimeWindow != rhs_storage._ogsDataReportTimeWindow {return false}
        if _storage._clientInstanceID != rhs_storage._clientInstanceID {return false}
        if _storage._forceClientUpdateCheck != rhs_storage._forceClientUpdateCheck {return false}
        if _storage._agreementSessionURL != rhs_storage._agreementSessionURL {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension CMsgClientRequestWebAPIAuthenticateUserNonce: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "CMsgClientRequestWebAPIAuthenticateUserNonce"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "token_type"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self._tokenType) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._tokenType {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: CMsgClientRequestWebAPIAuthenticateUserNonce, rhs: CMsgClientRequestWebAPIAuthenticateUserNonce) -> Bool {
    if lhs._tokenType != rhs._tokenType {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension CMsgClientRequestWebAPIAuthenticateUserNonceResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "CMsgClientRequestWebAPIAuthenticateUserNonceResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "eresult"),
    11: .standard(proto: "webapi_authenticate_user_nonce"),
    3: .standard(proto: "token_type"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self._eresult) }()
      case 3: try { try decoder.decodeSingularInt32Field(value: &self._tokenType) }()
      case 11: try { try decoder.decodeSingularStringField(value: &self._webapiAuthenticateUserNonce) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._eresult {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._tokenType {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 3)
    } }()
    try { if let v = self._webapiAuthenticateUserNonce {
      try visitor.visitSingularStringField(value: v, fieldNumber: 11)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: CMsgClientRequestWebAPIAuthenticateUserNonceResponse, rhs: CMsgClientRequestWebAPIAuthenticateUserNonceResponse) -> Bool {
    if lhs._eresult != rhs._eresult {return false}
    if lhs._webapiAuthenticateUserNonce != rhs._webapiAuthenticateUserNonce {return false}
    if lhs._tokenType != rhs._tokenType {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension CMsgClientLogOff: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "CMsgClientLogOff"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: CMsgClientLogOff, rhs: CMsgClientLogOff) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension CMsgClientLoggedOff: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "CMsgClientLoggedOff"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "eresult"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self._eresult) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._eresult {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: CMsgClientLoggedOff, rhs: CMsgClientLoggedOff) -> Bool {
    if lhs._eresult != rhs._eresult {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension CMsgClientNewLoginKey: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "CMsgClientNewLoginKey"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "unique_id"),
    2: .standard(proto: "login_key"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt32Field(value: &self._uniqueID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self._loginKey) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._uniqueID {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._loginKey {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: CMsgClientNewLoginKey, rhs: CMsgClientNewLoginKey) -> Bool {
    if lhs._uniqueID != rhs._uniqueID {return false}
    if lhs._loginKey != rhs._loginKey {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension CMsgClientNewLoginKeyAccepted: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "CMsgClientNewLoginKeyAccepted"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "unique_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt32Field(value: &self._uniqueID) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._uniqueID {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: CMsgClientNewLoginKeyAccepted, rhs: CMsgClientNewLoginKeyAccepted) -> Bool {
    if lhs._uniqueID != rhs._uniqueID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension CMsgClientAccountInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "CMsgClientAccountInfo"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "persona_name"),
    2: .standard(proto: "ip_country"),
    5: .standard(proto: "count_authed_computers"),
    7: .standard(proto: "account_flags"),
    8: .standard(proto: "facebook_id"),
    9: .standard(proto: "facebook_name"),
    14: .standard(proto: "steamguard_notify_newmachines"),
    15: .standard(proto: "steamguard_machine_name_user_chosen"),
    16: .standard(proto: "is_phone_verified"),
    17: .standard(proto: "two_factor_state"),
    18: .standard(proto: "is_phone_identifying"),
    19: .standard(proto: "is_phone_needing_reverify"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self._personaName) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self._ipCountry) }()
      case 5: try { try decoder.decodeSingularInt32Field(value: &self._countAuthedComputers) }()
      case 7: try { try decoder.decodeSingularUInt32Field(value: &self._accountFlags) }()
      case 8: try { try decoder.decodeSingularUInt64Field(value: &self._facebookID) }()
      case 9: try { try decoder.decodeSingularStringField(value: &self._facebookName) }()
      case 14: try { try decoder.decodeSingularBoolField(value: &self._steamguardNotifyNewmachines) }()
      case 15: try { try decoder.decodeSingularStringField(value: &self._steamguardMachineNameUserChosen) }()
      case 16: try { try decoder.decodeSingularBoolField(value: &self._isPhoneVerified) }()
      case 17: try { try decoder.decodeSingularUInt32Field(value: &self._twoFactorState) }()
      case 18: try { try decoder.decodeSingularBoolField(value: &self._isPhoneIdentifying) }()
      case 19: try { try decoder.decodeSingularBoolField(value: &self._isPhoneNeedingReverify) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._personaName {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._ipCountry {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._countAuthedComputers {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 5)
    } }()
    try { if let v = self._accountFlags {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 7)
    } }()
    try { if let v = self._facebookID {
      try visitor.visitSingularUInt64Field(value: v, fieldNumber: 8)
    } }()
    try { if let v = self._facebookName {
      try visitor.visitSingularStringField(value: v, fieldNumber: 9)
    } }()
    try { if let v = self._steamguardNotifyNewmachines {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 14)
    } }()
    try { if let v = self._steamguardMachineNameUserChosen {
      try visitor.visitSingularStringField(value: v, fieldNumber: 15)
    } }()
    try { if let v = self._isPhoneVerified {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 16)
    } }()
    try { if let v = self._twoFactorState {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 17)
    } }()
    try { if let v = self._isPhoneIdentifying {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 18)
    } }()
    try { if let v = self._isPhoneNeedingReverify {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 19)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: CMsgClientAccountInfo, rhs: CMsgClientAccountInfo) -> Bool {
    if lhs._personaName != rhs._personaName {return false}
    if lhs._ipCountry != rhs._ipCountry {return false}
    if lhs._countAuthedComputers != rhs._countAuthedComputers {return false}
    if lhs._accountFlags != rhs._accountFlags {return false}
    if lhs._facebookID != rhs._facebookID {return false}
    if lhs._facebookName != rhs._facebookName {return false}
    if lhs._steamguardNotifyNewmachines != rhs._steamguardNotifyNewmachines {return false}
    if lhs._steamguardMachineNameUserChosen != rhs._steamguardMachineNameUserChosen {return false}
    if lhs._isPhoneVerified != rhs._isPhoneVerified {return false}
    if lhs._twoFactorState != rhs._twoFactorState {return false}
    if lhs._isPhoneIdentifying != rhs._isPhoneIdentifying {return false}
    if lhs._isPhoneNeedingReverify != rhs._isPhoneNeedingReverify {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension CMsgClientChallengeRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "CMsgClientChallengeRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "steamid"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularFixed64Field(value: &self._steamid) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._steamid {
      try visitor.visitSingularFixed64Field(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: CMsgClientChallengeRequest, rhs: CMsgClientChallengeRequest) -> Bool {
    if lhs._steamid != rhs._steamid {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension CMsgClientChallengeResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "CMsgClientChallengeResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "challenge"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularFixed64Field(value: &self._challenge) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._challenge {
      try visitor.visitSingularFixed64Field(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: CMsgClientChallengeResponse, rhs: CMsgClientChallengeResponse) -> Bool {
    if lhs._challenge != rhs._challenge {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
